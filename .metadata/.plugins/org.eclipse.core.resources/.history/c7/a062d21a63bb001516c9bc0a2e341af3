package monday.mp3organizer;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.PathMatcher;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

import org.apache.tika.exception.TikaException;
import org.farng.mp3.MP3File;
import org.farng.mp3.TagException;
import org.farng.mp3.filename.FilenameTag;
import org.farng.mp3.id3.AbstractID3v2;
import org.xml.sax.SAXException;

public class Mp3Organizer {
	private static PathMatcher matcher = FileSystems.getDefault()
			.getPathMatcher("glob:*.{mp3}");

	public void org(Path path) throws IOException, TagException, SAXException,
			TikaException {
		MP3File file = new MP3File(path.toFile());
		FilenameTag tags = file.getFilenameTag();
		AbstractID3v2 tag = file.getID3v2Tag();
		Id3TagExtractor extractor = new Id3TagExtractor(path.toFile());
		//tags.setAlbumTitle(extractor);
		try (BufferedReader r = new BufferedReader(
				new FileReader(path.toFile()))) {
			String s;
			while ((s = r.readLine()) != null) {
				System.out.println(new String(s.getBytes("windows-1251")));
			}
		}

	}

	public void organizeSongs(Path path) throws IOException {
		for (File file : path.toFile().listFiles()) {
			Path filePath = file.toPath();
			if (matcher.matches(filePath.getFileName())) {
				// createArtistFolder(extractor.getMetaData(), file);
			}
		}
	}

	public void createArtistFolder(Mp3Metadata metaData, File file)
			throws IOException {
		String artist = metaData.getArtist().toLowerCase();
		String parentDirectory = file.getParent();
		String albumName = metaData.getAlbum().toLowerCase();
		Path destination = Paths.get(parentDirectory + "/" + artist + "/"
				+ albumName);
		if (!Files.exists(Paths.get(parentDirectory + "/" + artist))) {
			FileManager.createDir(destination, file, metaData);
		} else {
			if (!destination.toFile().exists()) {
				FileManager.createDir(destination, file, metaData);
			} else {
				FileManager.copyFileToDir(destination, file,
						StandardCopyOption.REPLACE_EXISTING);
			}

		}
		deleteIfExist(destination, file);
	}

	private void deleteIfExist(Path path, File file) {
		if (new File(path + "/" + file.getName()).exists()) {
			// remove duplicates
			file.delete();
		}
	}
}
