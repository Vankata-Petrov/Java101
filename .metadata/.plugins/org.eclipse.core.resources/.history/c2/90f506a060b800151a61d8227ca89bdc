package week5.wednesday.binarytree;

import java.util.NoSuchElementException;

public class BinaryTree {
	class Node {
		protected int depth;
		protected int height;
		protected int data;
		protected Node left;
		protected Node right;
		protected Node parent;

		public Node(int depth, int data, Node parent) {
			this.depth = depth;
			this.data = data;
			this.parent = parent;
		}

		public Node(int data) {
			this.data = data;
		}
	}

	private Node root;
	private NodeCalculator nodeCalculator;
	private NodeChecker nodeChecker;

	public BinaryTree() {
		nodeCalculator = new NodeCalculator();
		nodeChecker = new NodeChecker();
	}

	public void add(int data) throws Exception {
		if (root == null) {
			root = new Node(data);
		} else {
			add(root, data);
		}
	}

	private void add(Node node, int data) throws Exception {
		if (node == null) {
			return;
		}
		if (data == node.data) {
			throw new Exception("BST not awoled duplicates");
		}
		if (data > node.data && !nodeChecker.hasRightNode(node)) {
			node.right = new Node(node.depth + 1, data, node);
			nodeCalculator.calculateHeight(node.right);
			return;

		}
		if (data < node.data && !nodeChecker.hasLeftNode(node)) {
			node.left = new Node(node.depth + 1, data, node);
			nodeCalculator.calculateHeight(node.left);
			return;
		}

		Node nextNode = node.data < data ? node.right : node.left;
		add(nextNode, data);
	}

	public void addAfterDeleting(Node node, int data) throws Exception {
		if (node == null) {
			return;
		}
		if (data > node.data && !nodeChecker.hasRightNode(node)) {
			node.right = new Node(node.depth + 1, data, node);
			nodeCalculator.recalculateHeight(node.right);
			return;

		}
		if (data < node.data && !nodeChecker.hasLeftNode(node)) {
			node.left = new Node(node.depth + 1, data, node);
			nodeCalculator.recalculateHeight(node.left);
			return;
		}

		Node nextNode = node.data < data ? node.right : node.left;
		add(nextNode, data);
	}

	public void delete(int data) throws Exception {
		delete(root, data);
	}

	private void delete(Node node, int data) throws Exception {
		if (node == null) {
			return;
		}
		if (node.data > data) {
			delete(node.left, data);
		} else if (node.data < data) {
			delete(node.right, data);
		} else {
			if (nodeChecker.isLeaf(node)) {
				node.parent.height = 0;
				deleteLeaf(node);
				nodeCalculator.recalculateHeight(node.parent);
			} else {
				if (nodeChecker.hasRightNode(node)) {
					if (nodeChecker.isLeaf(node.right)) {
						//if (node == node.parent.left) {
							nodeCalculator.recalculateDepth(node.left);
							node.parent.left = node.left;
							node.left.depth = node.depth;
							addAfterDeleting(node.left, node.right.data);
							return;
						//}
					}
					Node smallest = findSmallest(node.right);
					node.data = smallest.data;
					delete(smallest, smallest.data);
				} else {
					node.parent.left = node.left;
				}
				nodeCalculator.recalculateHeight(node);
			}
		}
	}

	private void deleteLeaf(Node leaf) {
		if (leaf == leaf.parent.right) {
			leaf.parent.right = null;
		} else {
			leaf.parent.left = null;
		}
	}

	private Node getNodeByData(int data, Node node) {
		if (node == null) {
			return null;
		}
		if (data == node.data) {
			return node;
		}
		if (data < node.data) {
			return getNodeByData(data, node.left);
		} else if (data > node.data) {
			return getNodeByData(data, node.right);
		}
		return node;
	}

	public int getSmallest() {
		return findSmallest(root).data;
	}

	private Node findSmallest(Node node) {
		if (node.left == null) {
			return node;
		}
		return findSmallest(node.left);
	}

	public int getElementHeight(int element) {
		return getNodeByData(element).height;
	}

	public int getElementDepth(int number) {
		return getNodeByData(number, root).depth;
	}

	private Node getNodeByData(int number) throws NoSuchElementException {
		Node searchedNode = getNodeByData(number, root);
		if (searchedNode == null) {
			throw new NoSuchElementException("Element does not exist!");
		}
		return searchedNode;
	}

	public boolean contains(int element) {
		return getNodeByData(element) != null;
	}

	public int getRootData() {
		if (root == null) {
			throw new NoSuchElementException(
					"Tree is empty!Root does not exsit!");
		}
		return root.data;
	}

	@Override
	public String toString() {
		return new TreePrinter(root).toString();
	}

	public String printNodeData() {
		return new TreePrinter(root).recursivePrintNodeData();
	}
}