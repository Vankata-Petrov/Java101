package monday.duplicatesfinder;

import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.PathMatcher;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.List;
import java.util.Map;

import monday.duplicatesfinder.DuplicatesFinder.Key;

public class DuplicateFinder extends SimpleFileVisitor<Path> {
	private final PathMatcher matcher;
	private Map<Key, List<Path>> storage;

	public DuplicateFinder() {
		matcher = FileSystems.getDefault().getPathMatcher("glob:" + ".*");
	}

	public void matchDuplicate(Path path){
		BasicFileAttributes attribute = Files.readAttributes(path,
				BasicFileAttributes.class);
		if (checkSize(path)&& ) {
			
		}
	}

	@Override
	public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {
		// find(file);
		return FileVisitResult.CONTINUE;
	}

	@Override
	public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) {
		// find(dir);
		return FileVisitResult.CONTINUE;
	}

	@Override
	public FileVisitResult visitFileFailed(Path file, IOException exc) {
		System.err.println(exc);
		return FileVisitResult.CONTINUE;
	}

	private boolean checkSize(Path filePath) {
		return (filePath.toFile().length() / 1024) / 1024 < 512;
	}

	void done() {
		System.out.println();
	}
}
