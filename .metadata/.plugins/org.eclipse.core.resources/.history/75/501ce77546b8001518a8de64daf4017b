package week5.wednesday.binarytree;

import week5.wednesday.binarytree.BinaryTree.Node;

public class NodeCalculator {
	private BinaryTree tree;

	public NodeCalculator(BinaryTree tree) {
		this.tree = tree;
	}

	public void calculateHeight(Node node) {
		if (node == null) {
			return;
		}
		if (hasTwoChilds(node)) {
			if (node.left.height == node.right.height) {
				return;
			}
			int max = Math.max(node.left.height, node.right.height);
			node.height = max + 1;
		} else if (tree.hasLeftNode(node) && !tree.hasRightNode(node)) {
			node.height = node.left.height + 1;
		} else if (!tree.hasLeftNode(node) && tree.hasRightNode(node)) {
			node.height = node.right.height + 1;
		}
		calculateHeight(node.parent);
	}

	public void recalculateHeight(Node node) {
		if (node == null) {
			return;
		}
		if (hasTwoChilds(node)) {
			// if (node.left.height != node.right.height) {
			// return;
			// }
			int max = Math.max(node.left.height, node.right.height);
			node.height = max + 1;
		} else if (tree.hasLeftNode(node) && !tree.hasRightNode(node)) {
			node.height = node.left.height + 1;
		} else if (!tree.hasLeftNode(node) && tree.hasRightNode(node)) {
			node.height = node.right.height + 1;
		}
		recalculateHeight(node.parent);

	}

	private boolean hasTwoChilds(Node node) {
		return tree.hasLeftNode(node) && tree.hasRightNode(node);
	}
}
