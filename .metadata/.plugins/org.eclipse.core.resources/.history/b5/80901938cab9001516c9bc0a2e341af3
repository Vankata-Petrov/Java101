package monday.duplicatesfinder;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

public class DuplicatesFinder {
	private static Map<Byte[], List<Path>> files = new HashMap<>();

	public DuplicatesFinder() {
		//files = new HashMap<>();
	}

	public static void storeFiles(Byte[] hash, Path path) {
		if (!files.containsKey(hash)) {
			List<Path> p = new ArrayList<Path>();
			p.add(path);
			files.put(hash, p);
		}else {
			
			files.get(hash).add(path);
		}
	}

	public static void printDuplicates() {
		for (Entry<Byte[], List<Path>> paths : files.entrySet()) {
			List<Path> list = paths.getValue();
			// System.out.println(paths.getKey());
			System.out.println(list);
		}
	}

	public static void findDuplicate(Path path) throws IOException, NoSuchAlgorithmException {
		File file = path.toFile();
		File[] files = file.listFiles();
		for (File file2 : files) {
			Path filePath = file2.toPath();
			if (file2.isDirectory()) {
				findDuplicate(filePath);
			} else {
				byte[] bytes = Files.readAllBytes(filePath);
				MessageDigest md5 = MessageDigest.getInstance("MD5");
				byte[] hash = md5.digest(bytes);
				storeFiles(hash, filePath);
				// System.out.println(file2.getName());
			}

		}

	}
}
