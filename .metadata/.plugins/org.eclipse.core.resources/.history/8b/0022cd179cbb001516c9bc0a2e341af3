package monday.filedatacompression;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

public class FileDataCompression {
	private static Container container = new Container();

	public static void compress(Path path) throws IOException {
		Map<String, Integer> mappedWords = new HashMap<>();
		List<String> content = Files.readAllLines(path);
		for (String line : content) {
			String[] words = splitLine(line);
			for (String word : words) {
				word = word.replaceAll("\\p{Punct}", "");
				if (!container.contains(word)) {
					container.put(word);
				}
				line = line.replaceFirst(word, mappedWords.get(word) + "");
			}
			container.appendText(line);
		}
		container.save();
	}

	private static String[] splitLine(String line) {
		line = line.replaceAll("\\s+", "~");
		return line.split("~");

	}

	public static File decompress(Path path) throws ClassNotFoundException,
			IOException {
		properties.load(new FileReader(path.toFile()));
		String[] compressedText = properties.get("-1").toString().split("\n");
		StringBuilder stringBuilder = new StringBuilder();
		for (String line : compressedText) {
			String[] words = line.split("~");
			for (String code : words) {
				code = code.replaceAll("\\p{Punct}", "");
				String word = properties.getProperty(code);
				line = line.replaceAll(code, word);
			}
			stringBuilder.append(line.replaceAll("\\~", " ") + "\n");
		}
		return FileManager.saveToFile(stringBuilder.toString());
	}
}
