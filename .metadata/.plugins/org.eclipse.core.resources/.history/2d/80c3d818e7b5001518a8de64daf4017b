package week5.wednesday.binarytree;

public class BinaryTree {
	private class Node {
		private int depth;
		private int height;
		private int data;
		private Node left;
		private Node right;

		public Node(int height, int depth, int data, Node leftChild,
				Node rightChild) {
			this.height = height;
			this.depth = depth;
			this.data = data;
			this.left = leftChild;
			this.right = rightChild;
		}
	}

	private Node root;

	public BinaryTree() {
		// TODO Auto-generated constructor stub
	}

	private BinaryTree(Node root) {
		this.root = root;
	}

	public void add(int data) throws Exception {
		if (root == null) {
			root = new Node(0, 0, data, null, null);
		} else {
			recursiveAdd(data, root);
			if (root.left != null && root.right != null) {
				root.height = root.left.height >= root.right.height ? root.left.height + 1
						: root.right.height + 1;
			}
			if (root.left == null) {
				root.height = root.right.height + 1;
			} else if (root.right == null) {
				root.height = root.left.height + 1;
			}
		}
	}

	private void recursiveAdd(int data, Node parent) throws Exception {
		if (data == parent.data) {
			throw new Exception("BST not awoled duplicates");
		}
		if (parent.data > data && parent.left == null) {
			parent.left = new Node(0, parent.depth + 1, data, null, null);
			return;
		}
		if (parent.data < data && parent.right == null) {
			parent.right = new Node(0, parent.depth + 1, data, null, null);
			return;
		}
		Node node = parent.data < data ? parent.right : parent.left;
		recursiveAdd(data, node);
		int leftHeight = 0;
		int rightHeight = 0;
		if (node.left != null && node.right != null) {
			leftHeight = node.left.height;
			rightHeight = node.right.height;
			node.height = leftHeight >= rightHeight ? leftHeight + 1
					: rightHeight + 1;
		}
		if (node.left == null) {
			rightHeight = node.right.height;
			node.height = rightHeight + 1;
		} else if (node.right == null) {
			leftHeight = node.left.height;
			node.height = leftHeight + 1;
		}
	}

	public int getElementHeight(int element) {
		return getNodeByData(element).height;
	}

	public int getElementDepth(int number) {
		return getNodeByData(number, root).depth;
	}

	private Node getNodeByData(int number) {
		return getNodeByData(number, root);
	}

	public boolean contains(int element) {
		return getNodeByData(element) != null;
	}

	private Node getNodeByData(int data, Node node) {
		if (node != null && node != root && node.data == data) {
			return node;
		}
		if (node != null && data <= node.data) {
			if (data == node.data) {
				return node;
			}
			if (node.left == null) {
				return null;
			}
			return getNodeByData(data, node.left);
		} else if (node != null && data >= node.data) {
			if (data == node.data) {
				return node;
			}
			if (node.right == null) {
				return null;
			}
			return getNodeByData(data, node.right);
		}
		Node n = node != null && node.data < data ? node.right : node.left;
		return getNodeByData(data, n);
	}

	private BinaryTree getSubTree(Node n) {
		return new BinaryTree(n);
	}

	public int getRootData() {
		return root.data;
	}

	private void mergeTrees(Node root1, Node root2) {
		if (root2.left == null) {
			root2.left = root1;
			return;
		}
		mergeTrees(root1, root2.left);
	}

	public void deleteElement(int data) {
		if (root != null && root.left == null && root.right == null) {
			root = null;
			return;
		}
		if (root.data == data) {
			BinaryTree subTree = getSubTree(root.left);
			root = root.right;
			mergeTrees(subTree.root, root);
			return;
		}
		Node node = getChild(data, root);
		// check whether left is the data or right
		Node n = node.right.data == data ? node.right : node.left;
		if (n.left != null && n.right != null) {
			// split left child to subTree
			BinaryTree subTree = getSubTree(n.left);
			if (n == node.left) {
				node.left = n.right;
				Node highest = getHigheshtSubTree(node.left.right, subTree.root);
				mergeTrees(subTree.root, node.left);
				// if left is the highest then set node height to be left node
				// height else right node height
				if (highest == subTree.root) {

				} else {
					System.out.println("H" + highest.height);

				}
				return;
			} else if (n == node.right) {
				node.right = n.right;
				System.out.println(node.data);
				// get highest subTree root
				Node highest = getHigheshtSubTree(node.right.right,
						subTree.root);
				if (highest == subTree.root) {

				} else {
					System.out.println("H" + node.right.data);

				}
				System.out.println(highest.data);
				mergeTrees(subTree.root, node.right);
			}
			// node.left = null;

		} else if (n.left == null && n.right == null) {
			node.right = null;
		}
	}

	private Node getHigheshtSubTree(Node left, Node right) {
		if (left != null && right != null) {
			return left.height >= right.height ? left : right;
		}
		if (left == null) {
			return right;
		}
		return left;
	}

	private void recalculateHeight(Node node) {
		if (node.left == null && node.right == null) {
			return;
		}
		if (node.left != null) {
			recalculateHeight(node.left);
		} else if (node.right != null) {

			recalculateHeight(node.right);
		}
		node.height -= 1;
	}

	private int setNewHeigth(Node node) {
		int leftHeight = node.left.left.height;
		int rightHeight = node.right.right.height;
		return leftHeight > rightHeight ? leftHeight : rightHeight;
	}

	private Node getChild(int data, Node node) {
		if (node != null && node.left != null && node.right != null
				&& (node.left.data == data || node.right.data == data)) {
			return node;
		}
		if (node != null && node.right != null && node.right.data == data) {
			return node;
		} else if (node != null && node.left != null && node.left.data == data) {
			return node;
		}
		Node n = node != null && node.data < data ? node.right : node.left;
		return getChild(data, n);
	}

	private String recursivePrint(Node node) {
		if (node == null) {
			return "";
		}
		return recursivePrint(node.left) + " " + node.data + ","
				+ recursivePrint(node.right);
	}

	@Override
	public String toString() {
		if (root == null) {
			return "[]";
		}
		String bst = "[" + recursivePrint(root).trim();
		return bst.substring(0, bst.length() - 1) + "]";
	}
}
