package week5.friday.bank.account;

import java.io.Serializable;

import week5.friday.bank.ScannerClass;
import week5.friday.bank.account.BankAccount.History;
import week5.friday.bank.database.Storage;
import week5.friday.bank.enums.OperationType;
import week5.friday.bank.exception.ExceededInterestException;
import week5.friday.bank.exception.InsufficientAvailabilityException;
import week5.friday.bank.interfaces.BankOperations;

public class AccountSession implements BankOperations, Serializable {

	private static final long serialVersionUID = 1L;
	private static ScannerClass sc;
	private BankAccount account;

	public AccountSession() {
		sc = new ScannerClass();
	}

	public AccountSession(BankAccount account) {
		this.account = account;
	}

	@Override
	public void add() throws InsufficientAvailabilityException {
		System.out.println("Add money");
		double money = sc.getDouble();
		double total = account.getMoney() + money;
		account.setMoney(OperationType.ADD, money);
		History history = account.new History(OperationType.ADD, money);
		account.addToHistory(history);
		boolean success = account.getMoney() == total;
		if (success) {
			System.out.println("You succesfully added " + money);
			System.out.println("Your balance is: " + account.getBalance());
		}
	}

	@Override
	public double withdraw() throws ExceededInterestException,
			InsufficientAvailabilityException {

		System.out.println("Your balance is: " + account.getBalance());
		double money = sc.getDouble();

		if (account.getInterest().getInterestValue() > 1) {
			throw new ExceededInterestException(
					"You can't widraw money, because deposit "
							+ "interest is bigger than 1 percent");
		}
		if (account.getMoney() < money) {
			throw new InsufficientAvailabilityException(
					"Not enough money!Yuor balance is: " + account.getBalance());
		}
		History history = account.new History(OperationType.WITHDRAW, money);
		account.addToHistory(history);
		account.setMoney(OperationType.WITHDRAW, money);
		System.out.println("After operation your balance is: "
				+ account.getBalance());
		return money;
	}

	@Override
	public void transfer() throws ExceededInterestException,
			InsufficientAvailabilityException {
		System.out.println("Please enter the amount to transfer");
		double money = sc.getDouble();
		System.out.println("Please give user ID to make the transfer");
		Long id = sc.getLong();
		BankAccount account2 = null;
		try {
			account2 = Storage.accounts.get(id);
		} catch (Exception e) {
			System.err.println("Wrong Id...Please try to give correct id");
			transfer();
		}
		if (money > account.getBalance()) {
			throw new InsufficientAvailabilityException("Not enough money");
		}
		account.setMoney(OperationType.WITHDRAW, money);
		History history = account.new History(account2, OperationType.TRANSFER,
				money);
		account.addToHistory(history);
		account2.setMoney(OperationType.ADD, money);
	}

	@Override
	public void showBalance() throws InsufficientAvailabilityException {
		System.out.println(account.getBalance());

	}
}
