package com.boyko.polinom;

public class PolinomParser {
	private String[] terms;
	private PolinomTerm term;
	private String newPolinom;

	public PolinomParser(String expression) {
		expression = expression.replaceAll("\\^", "");
		terms = expression.split("\\+");
		parse();
	}

	public void parse() {
		for (int i = 0; i < terms.length; i++) {
			if (!terms[i].equals("1")) {
				term = new PolinomTerm(terms[i]);
			}
			newPolinom += term.toString();
		}
		newPolinom = newPolinom.substring(0, newPolinom.length() - 1);
	}

	private String computeTerm(String term) {
		int pow;
		if (term.equals("x")) {
			return "1";
		} else if (term.length() > 2) {
			String[] inner = term.split("x");
			int coefficient = Integer.parseInt(inner[0]);
			pow = Integer.parseInt(inner[1]);
			return ((coefficient * pow) + "x^" + (pow - 1));
		}
		pow = Character.getNumericValue(term.charAt(1));
		return pow + "x^" + (pow - 1);

	}

	@Override
	public String toString() {
		return newPolinom;
	}
}
