package friday.hashmap;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class MyHashMap<K, V> implements Map<K, V>, Iterable<K> {
	static class MapEntry<K, V> implements Entry<K, V> {
		private K key;
		private V value;

		public MapEntry(K key, V value) {
			this.key = key;
			this.value = value;
		}

		@Override
		public K getKey() {
			return key;
		}

		@Override
		public V getValue() {
			return value;
		}

		@Override
		public V setValue(V value) {
			this.value = value;
			return value;
		}

		@Override
		public String toString() {
			return "[key=" + key + ", value=" + value + "]";
		}
	}

	private static final float LOAD_FACTOR = 0.75f;
	private static final int INITIAL_CAPACITY = 16;
	private List<List<Entry<K, V>>> buckets;
	private int capacity;
	private int totalEntries;
	private Set<K> keys;
	private List<V> values;
	private Set<Entry<K, V>> entrySet;

	private boolean isReadyForResize() {
		return (LOAD_FACTOR * capacity) < totalEntries;
	}

	public MyHashMap() {
		capacity = INITIAL_CAPACITY;
		buckets = new ArrayList<>(INITIAL_CAPACITY);
		totalEntries = 0;
		keys = new HashSet<>();
		values = new ArrayList<>();
		entrySet = new HashSet<>();
		loadBuckets();
	}

	public MyHashMap(int initialCapacity) {
		capacity = initialCapacity;
		buckets = new ArrayList<>(initialCapacity);
		totalEntries = 0;
		keys = new HashSet<>();
		values = new ArrayList<>();
		entrySet = new HashSet<>();
		loadBuckets();
	}

	private void loadBuckets() {
		for (int i = 0; i < capacity; i++) {
			buckets.add(new LinkedList<Entry<K, V>>());
		}
	}

	static int hash(int h) {
		// This function ensures that hashCodes that differ only by
		// constant multiples at each bit position have a bounded
		// number of collisions (approximately 8 at default load factor).
		h ^= (h >>> 20) ^ (h >>> 12);
		return h ^ (h >>> 7) ^ (h >>> 4);
	}

	/**
	 * Returns index for hash code h.
	 */
	static int indexFor(int h, int length) {
		return h & (length - 1);
	}

	@Override
	public int size() {
		return buckets.size();
	}

	@Override
	public boolean isEmpty() {
		return buckets.isEmpty();
	}

	@Override
	public boolean containsKey(Object key) {
		if (key == null) {
			return false;
		}
		int hash = hash(key.hashCode());
		int position = indexFor(hash, size());
		List<Entry<K, V>> entries = buckets.get(position);
		for (Entry<K, V> mapEntry : entries) {
			if (mapEntry.getKey().equals(key)) {
				return true;
			}
		}
		return false;
	}

	@Override
	public boolean containsValue(Object value) {
		return values.contains(value);
	}

	@Override
	public V get(Object key) {
		int hash = hash(key.hashCode());
		int position = indexFor(hash, size());
		if (key == null || buckets.get(position) == null) {
			throw new NullPointerException();
		}
		List<Entry<K, V>> listEntry = buckets.get(position);
		for (Entry<K, V> mapEntry : listEntry) {
			if (mapEntry.getKey().equals(key)) {
				return mapEntry.getValue();
			}
		}
		return null;
	}

	private void resizeMap() {
		capacity = INITIAL_CAPACITY * 2;
		List<List<Entry<K, V>>> tempBuckets = buckets;
		buckets = new ArrayList<>(capacity);
		loadBuckets();
		for (List<Entry<K, V>> list : tempBuckets) {
			for (Entry<K, V> el : list) {
				put(el.getKey(), el.getValue());
			}
		}
	}

	@Override
	public V put(K key, V value) {
		if (isReadyForResize()) {
			keys = new HashSet<>();
			values = new ArrayList<>();
			entrySet = new HashSet<>();
			totalEntries = 0;
			resizeMap();
		}
		int hash = hash(key.hashCode());
		int position = indexFor(hash, size());
		if (key == null || buckets.get(position) == null) {
			throw new NullPointerException();
		}
		List<Entry<K, V>> listEntry = buckets.get(position);
		Entry<K, V> entry = new MapEntry<>(key, value);
		for (Entry<K, V> entrys : listEntry) {
			if (entrys.getKey().equals(key)) {
				entrys =null;
			}
		}
		entrySet.add(entry);
		listEntry.add(entry);
		keys.add(key);
		values.add(value);
		totalEntries++;
		return value;
	}

	@SuppressWarnings("unchecked")
	@Override
	public V remove(Object key) {
		int hash = hash(key.hashCode());
		int position = indexFor(hash, size());
		List<Entry<K, V>> mapEntry = buckets.get(position);
		Iterator<Entry<K, V>> it = mapEntry.listIterator();
		while (it.hasNext()) {
			Entry<K, V> k = it.next();
			if (k.getKey().equals(key)) {
				entrySet.remove(k);
				values.remove(k.getValue());
				it.remove();
			}
		}
		keys.remove(key);
		return (V) key;
	}

	@Override
	public void putAll(Map<? extends K, ? extends V> m) {
		// TODO Auto-generated method stub

	}

	@Override
	public void clear() {
		buckets.clear();
	}

	@Override
	public Set<K> keySet() {
		return keys;
	}

	@Override
	public Collection<V> values() {
		return values;
	}

	@Override
	public Set<java.util.Map.Entry<K, V>> entrySet() {
		return entrySet;
	}

	@Override
	public String toString() {
		String displayMap = "";
		for (int i = 0; i < size(); i++) {
			if (this.buckets.get(i) != null) {
				List<Entry<K, V>> entry = this.buckets.get(i);
				for (Entry<K, V> mapEntry : entry) {
					displayMap += "key: " + mapEntry.getKey() + " value: "
							+ mapEntry.getValue() + "\n";
				}
			}
		}
		return displayMap;
	}

	@Override
	public Iterator<K> iterator() {
		return this.iterator();
	}
}
