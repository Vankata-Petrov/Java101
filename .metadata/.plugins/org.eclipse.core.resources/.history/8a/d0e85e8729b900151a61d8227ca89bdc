package monday.filedatacompression;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.TreeMap;

public class FileDataCompression {
	public static final File COMPRESSED_DATA = new File("compressedFile.properties");

	public static void compress(Path path) throws IOException {
		Properties prop = new Properties();
		int wordId = 0;
		Map<String, Integer> mappedWords = new TreeMap<>();
		List<String> content = Files.readAllLines(path);
		List<String> compressedData = new ArrayList<>();
		for (String words : content) {
			words = words.replaceAll(" ", "~");
			String[] splited = words.trim().split("~");
			for (String word : splited) {
				word = word.replaceAll("\\p{Punct}", "");
				if (!mappedWords.containsKey(word)) {
					mappedWords.put(word, wordId++);
					prop.put(wordId + "", word);
				}
				words = words.replaceAll(word, mappedWords.get(word) + "");
			}
			compressedData.add(words + System.lineSeparator());
		}
		prop.put(0 + "", compressedData.toString());
		prop.store(new FileWriter(COMPRESSED_DATA), "props");
		System.out.println(compressedData);
	}

	public static void decompress(Path path) throws ClassNotFoundException, IOException {
		Properties prop = new Properties();
		prop.load(new FileReader(path.toFile()));
		String[] compressedText = prop.get("0").toString().split(",");
		for (String string : compressedText) {
			
		}
		System.out.println(Arrays.toString(compressedText));
	}
}
