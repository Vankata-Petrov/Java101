package monday.filedatacompression;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

public class FileDataCompression {
	private static final String DELIMITER = "~";
	private static Container container = new Container();

	public static void compress(Path path) throws IOException {
		List<String> content = FileManager.loadFile(path);
		for (String line : content) {
			line = line.replaceAll("\\s+", "~");
			String[] words = splitLine(line);
			for (String word : words) {
				word = removePunctuations(word);
				if (!container.contains(word)) {
					container.putInContainer(word);
				}
				line = line.replaceFirst(word, container.get(word));
			}
			container.appendText(line);
		}
		container.save();
	}

	private static String[] splitLine(String line) {
		return line.split(DELIMITER);
	}

	private static String removePunctuations(String word) {
		return word.replaceAll("\\p{Punct}", "");
	}

	public static File decompress(Path path) throws ClassNotFoundException,
			IOException {
		String[] compressedText = container.getCompression(path);
		for (String line : compressedText) {
			String[] words = splitLine(line);
			for (String code : words) {
				code = removePunctuations(code);
				String word = container.getWord(code);
				line = line.replaceAll(code, word);
			}
			container.appendNewContent(line);
		}
		return FileManager.saveToFile(container.getContent());
	}
}
