package monday.filedatacompression;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class FileDataCompression {
	private static void extractPunctuation(int id,String text,String word) {
		text = text.replaceAll(word, id+"");
		//System.out.println(text);
//		Pattern p = Pattern.compile("\\p{Punct}");
//		Matcher m = p.matcher(word);
//		if (m != null) {
//			String s = "";
//			while (m.find()) {
//				s = m.group();
//			}
//			if (!s.equals("") && word.contains(s)) {
//				return s.charAt(s.length() - 1);
//			}
//		}
//		return 0;
	}
	public static boolean isInteger( String input )
	{
	   try
	   {
	      Integer.parseInt( input );
	      return true;
	   }
	   catch( Exception e )
	   {
	      return false;
	   }
	}

	public static void compress(Path path) throws IOException {
		int wordId = -1;

		StringBuilder stringBuilder = new StringBuilder();
		Map<String, Integer> mappedWords = new HashMap<>();

		List<String> content = Files.readAllLines(path);

		for (String words : content) {
			words = words.replaceAll(" ", "~");
			String[] splited = words.trim().split("~");
			for (String word : splited) {
//				char punctoation = extractPunctuation(word);
//				if (punctoation != 0) {
//					// remove punctuation from the end of the word
//					word = word.substring(0, word.length() - 1);
//				}
				if (!mappedWords.containsKey(word)) {
					wordId++;
					mappedWords.put(word, wordId);
				}
				if (!isInteger(word) && !word.equals("~")) {
					
					extractPunctuation(wordId,words, word);
				}
//				stringBuilder.append(mappedWords.get(word));
//				if (punctoation != 0) {
//					stringBuilder.append(punctoation);
//				}
//				stringBuilder.append("~");
			}
//			if (stringBuilder.toString().endsWith("~")) {
//				stringBuilder.deleteCharAt(stringBuilder.length() - 1);
//			}
			System.out.println(mappedWords);
		}
		//System.out.println(stringBuilder.toString());
	}

	public static void decompress(Path path) {

	}
}
