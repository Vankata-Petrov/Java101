package monday.duplicatesfinder;

import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.PathMatcher;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DuplicateFinder extends SimpleFileVisitor<Path> {
	private final PathMatcher matcher;

	public class Key {
		private byte[] md5Hash;

		public Key(byte[] md5Hash) {
			this.md5Hash = md5Hash;
		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + getOuterType().hashCode();
			result = prime * result + Arrays.hashCode(md5Hash);
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Key other = (Key) obj;
			if (this.md5Hash.length != other.md5Hash.length) {
				return false;
			}
			if (!getOuterType().equals(other.getOuterType()))
				return false;
			if (!Arrays.equals(md5Hash, other.md5Hash))
				return false;
			return true;
		}

		private DuplicateFinder getOuterType() {
			return DuplicateFinder.this;
		}

	}

	private Map<Key, List<Path>> storage;
	private static final int CHUNK_SIZE = 8192;

	public DuplicateFinder() {
		matcher = FileSystems.getDefault().getPathMatcher("glob:" + "");
		storage = new HashMap<>();
	}

	public void matchDuplicate(Path path) throws IOException,
			NoSuchAlgorithmException {
		BasicFileAttributes attribute = Files.readAttributes(path,
				BasicFileAttributes.class);
		if (path.getFileName() != null && matcher.matches(path.getFileName())) {
			if (checkSize(path) && attribute.isRegularFile()) {
				if (attribute.isSymbolicLink()) {
					System.out.println("SYMBOLIC LINK ==> " + path);
					path = Files.readSymbolicLink(path);
				}
				byte[] md5Hash = generateMd5Hash(path);
				storeFiles(new Key(md5Hash), path);
			}
		}
	}

	public void storeFiles(Key hash, Path path) {
		if (!storage.containsKey(hash)) {
			List<Path> p = new ArrayList<Path>();
			p.add(path);
			storage.put(hash, p);
		} else {
			storage.get(hash).add(path);
		}
	}

	private byte[] generateMd5Hash(Path filePath) throws IOException,
			NoSuchAlgorithmException {
		try (BufferedInputStream is = new BufferedInputStream(
				new FileInputStream(filePath.toFile()))) {
			MessageDigest md5 = MessageDigest.getInstance("MD5");
			byte[] buffer = new byte[CHUNK_SIZE];
			int len;
			while ((len = is.read(buffer)) != -1) {
				md5.update(buffer, 0, len);
			}
			return md5.digest();
		}
	}

	@Override
	public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
			throws IOException {
		try {
			matchDuplicate(file);
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return FileVisitResult.CONTINUE;
	}

	@Override
	public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs)
			throws IOException {
		try {
			matchDuplicate(dir);
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return FileVisitResult.CONTINUE;
	}

	@Override
	public FileVisitResult visitFileFailed(Path file, IOException exc) {
		System.err.println(exc);
		return FileVisitResult.CONTINUE;
	}

	private boolean checkSize(Path filePath) {
		return (filePath.toFile().length() / 1024) / 1024 < 512;
	}

	void done() {
		System.out.println(storage);
	}
}
