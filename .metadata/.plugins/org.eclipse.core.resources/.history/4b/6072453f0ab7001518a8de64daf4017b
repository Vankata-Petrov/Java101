package week5.friday.bank;

import java.io.File;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Scanner;

import week5.friday.bank.Interest.InterestType;
import week5.friday.bank.account.BankAccount;
import week5.friday.bank.account.Person;
import week5.friday.bank.database.Storage;
import week5.friday.bank.exception.InsufficientAvailabilityException;
import week5.friday.bank.exception.OvercomeInterestException;
import week5.friday.bank.interfaces.BankOperations;

public class Bank implements BankOperations {

	private static Map<Long, BankAccount> accounts;
	private static Scanner sc = new Scanner(System.in);
	private Long lastAccountID;

	public Bank() {
		if (new File("lastAccountId.ser").exists()) {
			lastAccountID = Storage.getLastAccountID();
		} else {
			lastAccountID = 0L;
		}
		accounts = new HashMap<>();
	}

	@Override
	public boolean createBankAccount() {
		Person person = new Person();
		System.out.println("Please enter your first name");
		person.setFirstName(sc.nextLine());

		System.out.println("Please enter your second name");
		person.setLastName(sc.nextLine());

		System.out.println("Please enter your age");
		person.setAge(Integer.parseInt(sc.nextLine()));

		BankAccount account = new BankAccount(person);
		account.setID(lastAccountID + 1);
		lastAccountID++;
		System.out.println("PLease enter your password");
		account.setPassword(sc.nextLine());
		System.out
				.println("Choose Interest type: for SIMPLE press 1\nFor COMPLEX press 2");
		InterestType type = null;
		switch (Integer.parseInt(sc.nextLine())) {
		case 1:
			type = InterestType.SIMPLE;
			break;
		default:
			type = InterestType.COMPLEX;
			break;
		}
		System.out.println("Choose size of the Interest");
		Interest interest = new Interest(account, type, Double.parseDouble(sc
				.nextLine()));
		account.setInterest(interest);
		return accounts.put(account.getID(), account) != null;
	}

	@Override
	public boolean add(BankAccount account, double money) {
		double total = account.getMoney() + money;
		account.setMoney(account.getMoney() + money);
		return account.getMoney() == total;
	}

	@Override
	public double withdraw(BankAccount account, double money)
			throws OvercomeInterestException, InsufficientAvailabilityException {
		if (account.getInterest().getInterestValue() > 1) {
			throw new OvercomeInterestException(
					"Interest is bigger than 1 percent");
		}
		if (account.getMoney() < money) {
			throw new InsufficientAvailabilityException();
		}
		return money;
	}

	@Override
	public boolean transfer(BankAccount account1, BankAccount account2,
			double money) throws OvercomeInterestException,
			InsufficientAvailabilityException {
		double withdrawMoney = withdraw(account1, money);
		return add(account2, withdrawMoney);
	}

	@Override
	public BankAccount login() {
		System.out.println("Enter your Id");
		BankAccount account = accounts
				.get(Long.parseLong(sc.nextLine().trim()));
		if (!accounts.containsKey(account.getID())) {
			throw new NoSuchElementException("Invalid Unique number");
		}
		System.out.println("Enter you password");
		String password = sc.nextLine();
		if (account.getPassword().equals(password)) {
			return account;
		} else {
			throw new NoSuchElementException("Incorect password " + password);
		}
	}

	public static void main(String[] args) throws NumberFormatException,
			OvercomeInterestException, InsufficientAvailabilityException {
		
		Map<Long, BankAccount> loadedAccounts = new HashMap<>();
		if (new File("bankAccounts.ser").exists()) {
			accounts = Storage.loadFiles();
		}
		for (Map.Entry<Long, BankAccount> entry : accounts.entrySet()) {
			System.out.println(entry.getValue());
		}
		Bank bank = new Bank();
		System.out.println(bank.lastAccountID);
		bank.createBankAccount();
		// bank.createBankAccount();
		//BankAccount account = bank.login();
		Storage.saveFile(accounts);
		Storage.saveLastAccountId(bank.lastAccountID);
		for (Map.Entry<Long, BankAccount> entry : accounts.entrySet()) {
			System.out.println(entry.getValue());
		}
		// while (!bank.logout()) {
		// switch (sc.nextLine().toLowerCase()) {
		// case "add":
		// bank.add(account, Integer.parseInt(sc.nextLine()));
		// break;
		// case "withdraw":
		// bank.withdraw(account, Double.parseDouble(sc.nextLine()));
		// break;
		// case "transfer":
		// bank.transfer(account, account,
		// Double.parseDouble(sc.nextLine()));
		// break;
		// default:
		// bank.logout();
		// break;
		// }
		// }
		//System.out.println(account);
	}

	private boolean logout() {
		return sc.nextLine().equals("logout".toLowerCase());
	}
}
