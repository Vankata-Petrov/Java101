package monday.duplicatesfinder;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

public class DuplicatesFinder {
	public Map<byte[], List<Path>> storage = new HashMap<>();

	public DuplicatesFinder() {
		// files = new HashMap<>();
	}

	public void storeFiles(Map<byte[], List<Path>> storage, byte[] hash,
			Path path) {
		System.out.println(Arrays.toString(hash));
		if (!storage.containsKey(hash)) {
			List<Path> p = new ArrayList<Path>();
			p.add(path);
		}
		storage.get(hash).add(path);

	}

	public void printDuplicates() {
		for (Entry<byte[], List<Path>> paths : storage.entrySet()) {
			System.out.println(paths.getValue());
		}
	}

	public void findDuplicate(Path path) throws IOException,
			NoSuchAlgorithmException {
		File file = path.toFile();
		File[] files = file.listFiles();
		for (File file2 : files) {
			Path filePath = file2.toPath();
			if (file2.isDirectory()) {
				findDuplicate(filePath);
			} else {
				byte[] bytes = Files.readAllBytes(filePath);
				MessageDigest md5 = MessageDigest.getInstance("MD5");
				byte[] hash = md5.digest(bytes);
				storeFiles(storage, hash, filePath);
				// System.out.println(file2.getName());
			}

		}

	}
}
