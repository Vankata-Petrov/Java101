package friday.hashmap;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class MyHashMap<K, V> implements Map<K, V> {
	static class MapEntry<K, V> {
		K key;
		V value;

		public MapEntry(K key, V value) {
			this.key = key;
			this.value = value;
		}

	}

	private List<List<MapEntry<K, V>>> map;
	private int initialCapacity;
	private static final float LOAD_FACTOR = 0.75f;

	public MyHashMap() {
		initialCapacity = 16;
		map = new ArrayList<>(initialCapacity);
		loadBuckets();
	}

	public MyHashMap(int initialCapacity) {
		this.initialCapacity = initialCapacity;
		map = new ArrayList<>(initialCapacity);
		loadBuckets();
	}

	private void loadBuckets() {
		for (int i = 0; i < initialCapacity; i++) {
			map.add(new LinkedList<MapEntry<K, V>>());
		}
	}

	private int hash(Object key) {
		return Math.abs(key.hashCode() % initialCapacity*9)/2;
	}

	@Override
	public int size() {
		return map.size();
	}

	@Override
	public boolean isEmpty() {
		return map.isEmpty();
	}

	@Override
	public boolean containsKey(Object key) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean containsValue(Object value) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public V get(Object key) {
		int position = hash(key);
		if (key == null || map.get(position) == null) {
			throw new NullPointerException();
		}
		List<MapEntry<K, V>> listEntry = map.get(position);
		for (MapEntry<K, V> mapEntry : listEntry) {
			if (mapEntry.key.equals(key)) {
				return mapEntry.value;
			}
		}
		return null;
	}

	@Override
	public V put(K key, V value) {
		int position = hash(key);
		if (key == null || map.get(position) == null) {
			throw new NullPointerException();
		}
		List<MapEntry<K, V>> listEntry = map.get(position);
		if (listEntry == null) {
			List<MapEntry<K, V>> entryList = new LinkedList<>();
			entryList.add(new MapEntry<>(key, value));
			map.add(position, entryList);
		} else {
			listEntry.add(new MapEntry<>(key, value));
		}
		return value;
	}

	@Override
	public V remove(Object key) {
		int position = hash(key);
		System.out.println(position);
		if (key == null) {
			throw new NullPointerException();
		}
		map.set(position, null);
		return null;
	}

	@Override
	public void putAll(Map<? extends K, ? extends V> m) {
		// TODO Auto-generated method stub

	}

	@Override
	public void clear() {
		map.clear();

	}

	@Override
	public Set<K> keySet() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Collection<V> values() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Set<java.util.Map.Entry<K, V>> entrySet() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String toString() {
		String map = "";
		for (int i = 0; i < size(); i++) {
			if (this.map.get(i) != null) {
				List<MapEntry<K, V>> entry = this.map.get(i);
				// for (MapEntry<K, V> mapEntry : entry) {
				// map += "key: " + mapEntry.key + " value: " + mapEntry.value
				// + "\n";
				// }
				map += entry;
			}
		}
		return map.toString();
	}
}
