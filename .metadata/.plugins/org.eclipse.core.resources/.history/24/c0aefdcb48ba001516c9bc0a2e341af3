package monday.mp3organizer;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.PathMatcher;
import java.nio.file.Paths;
import java.nio.file.attribute.PosixFileAttributes;
import org.farng.mp3.TagException;

public class Mp3Organizer {
	private static final int ID3_TAG_SIZE = 128;
	private static PathMatcher matcher = FileSystems.getDefault()
			.getPathMatcher("glob:*.{mp3}");

	@SuppressWarnings("unused")
	public void organizeSongs(Path path) throws IOException, TagException {
		for (File file : path.toFile().listFiles()) {
			PosixFileAttributes attribute = Files.readAttributes(file.toPath(),
					PosixFileAttributes.class);
			if (matcher.matches(file.toPath().getFileName())) {
				Mp3Metadata metaData = readTag(file);
				if (metaData.hasArtistName()) {
					metaData.setArtist(Mp3Metadata.UNKNOWN_ARTIST);
				} else if (metaData.hasAlbumName()) {
					metaData.setAlbum(Mp3Metadata.UNKNOWN_ALBUM);
				} else if (metaData.hasSongName()) {
					metaData.setTitle(Mp3Metadata.UNKNOWN_SONG);
				}
				if (!Files.exists(Paths.get(metaData.getArtist()))) {
					Files.createDirectories(Paths.get(file.getParent() + "/"
		+ metaData.getArtist()));
					Files.copy(file.toPath(), Paths.get(file.getParent() + "/"
							+ metaData.getArtist()));
				}
				System.out.println(file.getParent());
			}
		}
	}

	@SuppressWarnings("resource")
	public Mp3Metadata readTag(File file) throws IOException {
		RandomAccessFile randomAccessFile = new RandomAccessFile(file, "r");
		byte[] tagData = new byte[ID3_TAG_SIZE];
		randomAccessFile.seek(randomAccessFile.length() - ID3_TAG_SIZE);
		randomAccessFile.read(tagData);
		ByteBuffer lst128Bytes = ByteBuffer.allocate(ID3_TAG_SIZE);
		lst128Bytes.put(tagData);
		lst128Bytes.rewind();
		return extractMetaData(lst128Bytes);
	}

	private Mp3Metadata extractMetaData(ByteBuffer bBuf) {
		byte[] tag = new byte[3];
		byte[] title = new byte[30];
		byte[] artist = new byte[30];
		byte[] album = new byte[30];
		bBuf.get(tag).get(title).get(artist).get(album);
		if (!(new String(tag)).equals("TAG")) {
			throw new IllegalArgumentException(
					"ByteBuffer does not contain ID3 tag data");
		}
		return new Mp3Metadata(new String(title).trim(),
				new String(artist).trim(), new String(album).trim());
	}

	public static void main(String[] args) throws IOException, TagException {
		new Mp3Organizer()
				.organizeSongs(Paths.get("/home/boyko/Desktop/music"));
	}
}
