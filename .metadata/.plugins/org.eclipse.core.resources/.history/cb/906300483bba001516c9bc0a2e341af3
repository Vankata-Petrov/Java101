package monday.mp3organizer;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.PathMatcher;
import java.nio.file.Paths;
import java.nio.file.attribute.PosixFileAttributes;

import org.farng.mp3.TagException;

public class Mp3Organizer {
	private static final int ID3_TAG_SIZE = 128;
	private static PathMatcher matcher = FileSystems.getDefault()
			.getPathMatcher("glob:*.{mp3}");

	public void organizeSongs(Path path) throws IOException, TagException {
		for (File file : path.toFile().listFiles()) {
			PosixFileAttributes attribute = Files.readAttributes(file.toPath(),
					PosixFileAttributes.class);
			System.out.println();
			if (matcher.matches(file.toPath().getFileName())) {

				System.out.println(readTag(file));
			}
		}
	}

	public Mp3Metadata readTag(File file) throws IOException {
		RandomAccessFile raf = new RandomAccessFile(file, "r");
		byte[] tagData = new byte[ID3_TAG_SIZE];
		raf.seek(raf.length() - ID3_TAG_SIZE);
		raf.read(tagData);
		ByteBuffer bBuf = ByteBuffer.allocate(ID3_TAG_SIZE);
		bBuf.put(tagData);
		bBuf.rewind();
		return populateTag(bBuf);
	}

	private Mp3Metadata populateTag(ByteBuffer bBuf) {
		byte[] tag = new byte[3];
		byte[] title = new byte[30];
		byte[] artist = new byte[30];
		byte[] album = new byte[30];
		byte[] a = new byte[40];
		bBuf.get(a);
		//bBuf.get(tag).get(title).get(artist).get(album);
		System.out.println(new String(a));
		System.out.println(new String(tag));
		if (!(new String(tag)).equals("UUU")) {
			throw new IllegalArgumentException(
					"ByteBuffer does not contain ID3 tag data");
		}
		return new Mp3Metadata(new String(title).trim(),
				new String(artist).trim(), new String(album).trim());
	}

	public static void main(String[] args) throws IOException, TagException {
		new Mp3Organizer()
				.organizeSongs(Paths.get("/home/boyko/Desktop/music"));
	}
}
