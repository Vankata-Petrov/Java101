package wednesday.statistic;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Statistic implements StatisticInterface, Iterable<Integer> {

	private List<Integer> numbers;
	private int size;

	public Statistic() {
		numbers = new ArrayList<Integer>();
	}

	public void add(int n) {
		numbers.add(n);
		Collections.sort(numbers);
		size = numbers.size();
	}

	@Override
	public int getMean() {
		int sum = 0;
		for (int i : numbers) {
			sum += i;
		}
		System.out.println(numbers);
		return sum / size;
	}

	@Override
	public int getMedian() {
		if (size % 2 != 0) {
			return numbers.get((size + 1) / 2);
		}
		return numbers.get(size / 2);
	}

	@Override
	public int getMode() {
		int max = 0;
		int mostFrequentNumber = 0;
		for (int i = 0; i < size - 1; i++) {
			int currentNum = numbers.get(i);
			int nextNum = numbers.get(i + 1);
			int tempMax = 0;
			while (currentNum == nextNum) {
				currentNum = numbers.get(i);
				nextNum = numbers.get(i + 1);
				tempMax++;
				i++;
			}
			if (tempMax > max) {
				max = tempMax;
				mostFrequentNumber = numbers.get(i);
			}
		}
		//
		// Set<Integer> uniqueSet = new HashSet<>(numbers);
		// int max = -1;
		// int el = 0;
		// for (int temp : uniqueSet) {
		// int count = Collections.frequency(numbers, temp);
		// if (count > max) {
		// max = count;
		// el = temp;
		// }
		// }
		return mostFrequentNumber;
	}

	@Override
	public int getRange() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public Iterator<Integer> iterator() {
		return this.numbers.iterator();
	}

}
