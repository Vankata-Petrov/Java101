package week5.wednesday.binarytree;

public class BinaryTree {
	private class Node {
		private int depth;
		private int height;
		private int data;
		private Node left;
		private Node right;
		private Node parent;

		// constructor for the root
		public Node(int data) {
			this.height = 0;
			this.depth = 0;
			this.data = data;
			this.left = null;
			this.right = null;
			this.parent = null;
		}

		// constructor for the leaf node
		public Node(int depth, int data, Node parent) {
			this.height = 0;
			this.depth = depth;
			this.data = data;
			this.left = null;
			this.right = null;
			this.parent = parent;
		}
	}

	private Node root;

	public BinaryTree() {
		// TODO Auto-generated constructor stub
	}

	public void add(int data) throws Exception {
		if (root == null) {
			root = new Node(data);
		} else {
			Node n = recursiveAdd(data, root);
			if (root.left != null && root.right != null) {
				root.height = root.left.height >= root.right.height ? root.left.height + 1
						: root.right.height + 1;
			}
			if (root.left == null) {
				root.height = root.right.height + 1;
			} else if (root.right == null) {
				root.height = root.left.height + 1;
			}
		}
	}

	private Node recursiveAdd(int data, Node parent) throws Exception {
		if (parent == null) {
			return parent;
		}
		if (data == parent.data) {
			throw new Exception("BST not awoled duplicates");
		}
		if (parent.data > data && parent.left == null) {
			parent.left = new Node(parent.depth + 1, data, parent);
			return parent.left;
		}
		if (parent.data < data && parent.right == null) {
			parent.right = new Node(parent.depth + 1, data, parent);
			return parent.right;
		}
		Node node = parent.data < data ? parent.right : parent.left;
		recursiveAdd(data, node);
		// set height-/*
		int leftHeight = 0;
		int rightHeight = 0;
		if (node.left != null && node.right != null) {
			leftHeight = node.left.height;
			rightHeight = node.right.height;
			node.height = leftHeight >= rightHeight ? leftHeight + 1
					: rightHeight + 1;
		}
		if (node.left == null) {
			rightHeight = node.right.height;
			node.height = rightHeight + 1;
		} else if (node.right == null) {
			leftHeight = node.left.height;
			node.height = leftHeight + 1;
		}
		return parent;
	}

	public int getElementHeight(int element) {
		return getNodeByData(element).height;
	}

	public int getElementDepth(int number) {
		return getNodeByData(number, root).depth;
	}

	private Node getNodeByData(int number) {
		return getNodeByData(number, root);
	}

	public boolean contains(int element) {
		return getNodeByData(element) != null;
	}

	private Node getNodeByData(int data, Node node) {
		if (node == null) {
			return null;
		}
		if (data == node.data) {
			return node;
		}
		if (data < node.data) {
			return getNodeByData(data, node.left);
		} else if (data > node.data) {
			return getNodeByData(data, node.right);
		}
		return node;
	}

	public int getParentData(int data) {
		return getNodeByData(data).parent.data;
	}

	public int getRootData() {
		return root.data;
	}

	public void delete(int data) {
		delete(root, data);
	}

	private void delete(Node node, int data) {
		if (node == null) {
			return;
		}
		if (node.data >= data) {
			if (node.data == data) {
				
				node.parent.left = getSmallestFromTheRightSubTree(node.left);
				return;
			}
			delete(node.left, data);
		}
	}

	// private Node delete(Node node, int data) {
	// if (node == null) {
	// return null;
	// }
	// if (data > node.data) {
	// node.right = delete(node.right, data);
	// } else if (data < node.data) {
	// node.left = delete(node.left, data);
	// } else {
	// if (node.left == null) {
	// recalculateDepth(node.right);
	// // recalculateHeight(node.parent);
	// // if (node.parent.left.height < node.height) {
	// // node.height -= 1;
	// // }
	// return node.right;
	// } else if (node.right == null) {
	// recalculateDepth(node.left);
	// // recalculateHeight(node.parent);
	// if (node.parent.right.height < node.height) {
	// node.height -= 1;
	// }
	// return node.left;
	// }
	// System.out.println(node.data);
	// if (node.right != null) {
	// node.data = getSmallestFromTheRightSubTree(node.right);
	// node.right = delete(node.right, node.data);
	// }
	// // }else {
	// // node.data = node.left.data;
	// // node.left = delete(node.right, node.data);
	// // }
	// }
	// return node;
	// }

	private void recalculateHeight(Node node) {
		if (node == null) {
			root.height++;
			return;
		}
		if (node.left == null) {
			node.height = node.right.height;
		}
		if (node.right == null) {
			node.height = node.left.height;
		} else if (node.left != null && node.right != null) {
			Node max = node.left.height > node.right.height ? node.left
					: node.right;
			node.height = max.height;
		}
		recalculateHeight(node.parent);
	}

	private void recalculateDepth(Node node) {
		if (node == null) {
			return;
		}
		recalculateDepth(node.right);
		recalculateDepth(node.left);
		node.depth--;
	}

	private Node getSmallestFromTheRightSubTree(Node node) {
		if (node.left == null) {
			return node;
		}
		return getSmallestFromTheRightSubTree(node.left);
	}

	private String recursivePrint(Node node) {
		if (node == null) {
			return "";
		}
		return recursivePrint(node.left) + " " + node.data + ","
				+ recursivePrint(node.right);
	}

	private String recursivePrintNodeData(Node node) {
		if (node == null) {
			return "";
		}
		return recursivePrintNodeData(node.left) + " " + node.data + "( H:"
				+ node.height + " D:" + node.depth + ")" + ","
				+ recursivePrintNodeData(node.right);
	}

	public String recursivePrintNodeData() {
		if (root == null) {
			return "[]";
		}
		String bst = "[" + recursivePrintNodeData(root).trim();
		return bst.substring(0, bst.length() - 1) + "]";
	}

	@Override
	public String toString() {
		if (root == null) {
			return "[]";
		}
		String bst = "[" + recursivePrint(root).trim();
		return bst.substring(0, bst.length() - 1) + "]";
	}
}
