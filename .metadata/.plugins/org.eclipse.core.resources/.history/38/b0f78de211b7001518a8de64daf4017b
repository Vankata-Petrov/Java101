package week5.friday.bank;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.Serializable;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Scanner;

import week5.friday.bank.Interest.InterestType;
import week5.friday.bank.account.BankAccount;
import week5.friday.bank.account.Person;
import week5.friday.bank.database.Storage;
import week5.friday.bank.exception.ExceededInterestException;
import week5.friday.bank.exception.InsufficientAvailabilityException;
import week5.friday.bank.interfaces.BankOperations;

public class Bank implements BankOperations, Serializable {
	public enum OperationType {
		ADD, WITHDRAW, TRANSFER, SHOW_HISTORY
	}

	private static final long serialVersionUID = 1L;
	private Map<Long, BankAccount> accounts;
	private static Scanner sc = new Scanner(System.in);
	private Long lastAccountID;

	public Bank() throws FileNotFoundException {
		accounts = loadAccounts();
		lastAccountID = loadLastAccountID();
	}

	private Map<Long, BankAccount> loadAccounts() throws FileNotFoundException {
		if (new File("bankAccounts.ser").exists()) {
			return Storage.loadFiles();
		}
		throw new FileNotFoundException("File not exist");
	}

	private Long loadLastAccountID() {
		if (new File("lastAccountId.ser").exists()) {
			return Storage.getLastAccountID();
		}
		return 0L;
	}

	@Override
	public boolean createBankAccount() {
		Person person = new Person();
		System.out.println("Please enter your first name");
		person.setFirstName(sc.nextLine());

		System.out.println("Please enter your second name");
		person.setLastName(sc.nextLine());

		System.out.println("Please enter your age");
		person.setAge(Integer.parseInt(sc.nextLine()));

		BankAccount account = new BankAccount(person);
		account.setID(lastAccountID + 1);
		lastAccountID++;
		System.out.println("PLease enter your password");
		account.setPassword(sc.nextLine());
		System.out
				.println("Choose Interest type: for SIMPLE press 1\nFor COMPLEX press 2");
		InterestType type = null;
		switch (Integer.parseInt(sc.nextLine())) {
		case 1:
			type = InterestType.SIMPLE;
			break;
		default:
			type = InterestType.COMPLEX;
			break;
		}
		System.out.println("Choose size of the Interest");
		Interest interest = new Interest(account, type, Double.parseDouble(sc
				.nextLine()));
		account.setInterest(interest);
		accounts.put(account.getID(), account);
		return accounts.get(account.getID()) != null;
	}

	@Override
	public boolean add(BankAccount account, double money) {
		double total = account.getMoney() + money;
		account.setMoney(account.getMoney() + money);
		account.getAccountHistory().add(account.new History(OperationType.ADD));
		return account.getMoney() == total;
	}

	@Override
	public double withdraw(BankAccount account, double money)
			throws ExceededInterestException, InsufficientAvailabilityException {
		if (account.getInterest().getInterestValue() > 1) {
			throw new ExceededInterestException(
					"Interest is bigger than 1 percent");
		}
		if (account.getMoney() < money) {
			throw new InsufficientAvailabilityException();
		}
		account.getAccountHistory().add(account.new History(OperationType.WITHDRAW));
		return money;
	}

	@Override
	public boolean transfer(BankAccount account1, double money)
			throws ExceededInterestException, InsufficientAvailabilityException {
		System.out.println("Please give account ID to make transfer");
		Long id = Long.parseLong(sc.nextLine());
		BankAccount account2 = null;
		try {
			account2 = accounts.get(id);
		} catch (Exception e) {
			System.err.println("Wrong Id...Please try to give correct id");
			transfer(account1, money);
		}
		double withdrawMoney = withdraw(account1, money);
		account1.getAccountHistory().add(account1.new History(OperationType.TRANSFER));
		return add(account2, withdrawMoney);
	}

	@Override
	public BankAccount login() {
		System.out.println("Enter your Id");
		BankAccount account = accounts
				.get(Long.parseLong(sc.nextLine().trim()));
		if (!accounts.containsKey(account.getID())) {
			throw new NoSuchElementException("Invalid Unique number");
		}
		System.out.println("Enter you password");
		String password = sc.nextLine();
		if (account.getPassword().equals(password)) {
			return account;
		} else {
			throw new NoSuchElementException("Incorect password " + password);
		}
	}

	public static void main(String[] args) throws NumberFormatException,
			ExceededInterestException, InsufficientAvailabilityException,
			FileNotFoundException {

		// Map<Long, BankAccount> loadedAccounts = new HashMap<>();
		//
		Bank bank = new Bank();
		// for (Map.Entry<Long, BankAccount> entry : bank.accounts.entrySet()) {
		// System.out.println(entry.getValue());
		// }
		System.out.println(bank.accounts);
		bank.createBankAccount();
		// bank.createBankAccount();
		// BankAccount account = bank.login();
		Storage.saveFile(bank.accounts);
		Storage.saveLastAccountId(bank.lastAccountID);
		for (Map.Entry<Long, BankAccount> entry : bank.accounts.entrySet()) {
			System.out.println(entry.getValue());
		}
		// while (!bank.logout()) {
		// switch (sc.nextLine().toLowerCase()) {
		// case "add":
		// bank.add(account, Integer.parseInt(sc.nextLine()));
		// break;
		// case "withdraw":
		// bank.withdraw(account, Double.parseDouble(sc.nextLine()));
		// break;
		// case "transfer":
		// bank.transfer(account, account,
		// Double.parseDouble(sc.nextLine()));
		// break;
		// default:
		// bank.logout();
		// break;
		// }
		// }
		// System.out.println(account);
	}

	private boolean logout() {
		return sc.nextLine().equals("logout".toLowerCase());
	}
}
