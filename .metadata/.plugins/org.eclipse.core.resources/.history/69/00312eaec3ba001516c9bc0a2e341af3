package monday.mp3organizer;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.file.CopyOption;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.PathMatcher;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.nio.file.attribute.PosixFileAttributes;

import org.farng.mp3.TagException;

public class Mp3Organizer {
	private static PathMatcher matcher = FileSystems.getDefault()
			.getPathMatcher("glob:*.{mp3}");

	@SuppressWarnings("unused")
	public void organizeSongs(Path path) throws IOException, TagException {
		for (File file : path.toFile().listFiles()) {
			PosixFileAttributes attribute = Files.readAttributes(file.toPath(),
					PosixFileAttributes.class);
			Path filePath = file.toPath();
			if (matcher.matches(filePath.getFileName())) {
				Id3TagExtractor extractor = new Id3TagExtractor(file);
				createArtistFolder(extractor.getMetaData(), file);
			}
		}
	}

	public void createArtistFolder(Mp3Metadata metaData, File file)
			throws IOException {
		metaData.checkForUnknownStatus();
		String artist = metaData.getArtist().toLowerCase();
		String parentDirectory = file.getParent();
		String albumName = metaData.getAlbum().toLowerCase();
		Path destination = Paths.get(parentDirectory + "/" + artist + "/"
				+ albumName);
		if (!Files.exists(Paths.get(parentDirectory + "/" + artist))) {
			FileManager.createDir(destination, file, metaData);
		} else {
			if (destination.toFile().exists()) {
				FileManager.copyFileToDir(destination, file,
						StandardCopyOption.REPLACE_EXISTING);
			} else {
				FileManager.createDir(destination, file, metaData);
			}
		}
		if (new File(destination + "/" + file.getName()).exists()) {
			// remove duplicates
			file.delete();
		}
	}
}
