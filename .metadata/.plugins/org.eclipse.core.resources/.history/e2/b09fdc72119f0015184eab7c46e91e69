package com.boyko.polinom;

public class Test {
	public static boolean isInside(int[][] matrix, int i, int j) {
		int len = matrix.length;
		boolean a = i - 1 >= 0;
		boolean b = i + 1 < matrix.length ;
		boolean c = j + 1 < matrix.length ;
		boolean d = j - 1 >= 0;
		return a && b && c && d;
	}

	public static int upLeft(int[][] matrix, int i, int j) {
		if (isInside(matrix, i, j)) {
			return matrix[i - 1][j - 1];
		}
		return 0;
	}

	public static int sum(int[][] matrix, int i, int j) {
		int sum = 0;
		sum += upLeft(matrix, i, j);
		sum += up(matrix, i, j);
		sum += upRight(matrix, i, j);
		sum += left(matrix, i, j);
		sum += right(matrix, i, j);
		sum += lowLeft(matrix, i, j);
		sum += lowRight(matrix, i, j);
		sum += low(matrix, i, j);
		return sum;
	}

	private static int low(int[][] matrix, int i, int j) {
		if (isInside(matrix, i, j)) {
			return matrix[i + 1][j];
		}
		return 0;
	}

	private static int left(int[][] matrix, int i, int j) {
		if (isInside(matrix, i, j)) {
			return matrix[i][j - 1];
		}
		return 0;
	}

	private static int right(int[][] matrix, int i, int j) {
		if (isInside(matrix, i, j)) {
			return matrix[i][j + 1];
		}
		return 0;
	}

	private static int lowLeft(int[][] matrix, int i, int j) {
		if (isInside(matrix, i, j)) {
			return matrix[i + 1][j - 1];
		}
		return 0;
	}

	private static int lowRight(int[][] matrix, int i, int j) {
		if (isInside(matrix, i, j)) {
			return matrix[i + 1][j + 1];
		}
		return 0;
	}

	private static int upRight(int[][] matrix, int i, int j) {
		if (isInside(matrix, i, j)) {
			return matrix[i - 1][j + 1];
		}
		return 0;
	}

	private static int up(int[][] matrix, int i, int j) {
		if (isInside(matrix, i, j)) {
			return matrix[i - 1][j];
		}
		return 0;
	}

	public static void main(String[] args) {
		int[][] matrix = { { 1, 2, 3, 4 }, { 5, 6, 7, 8 }, { 9, 10, 11, 12 } };
		for (int i = 0; i < matrix.length; i++) {
			int sum = 0;
			for (int j = 0; j < matrix.length; j++) {
				System.out.println(sum(matrix, i, j));
				break;
			}
			break;
		}
	}

}
