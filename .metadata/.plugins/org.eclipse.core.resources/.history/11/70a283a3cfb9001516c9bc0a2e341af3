package monday.duplicatesfinder;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

public class DuplicatesFinder {

	private class Key {
		private byte[] md5Hash;

		public Key(byte[] md5Hash) {
			this.md5Hash = md5Hash;
		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + getOuterType().hashCode();
			result = prime * result + Arrays.hashCode(md5Hash);
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Key other = (Key) obj;
			if (!getOuterType().equals(other.getOuterType()))
				return false;
			if (!Arrays.equals(md5Hash, other.md5Hash))
				return false;
			return true;
		}

		private DuplicatesFinder getOuterType() {
			return DuplicatesFinder.this;
		}

	}

	public Map<Key, List<Path>> storage;

	public DuplicatesFinder() {
		storage = new HashMap<>();
	}

	public void storeFiles(Map<Key, List<Path>> storage, Key hash, Path path) {
		// System.out.println(Arrays.toString(hash));
		System.out.println(hash);
		if (!storage.containsKey(hash)) {
			List<Path> p = new ArrayList<Path>();
			p.add(path);
			storage.put(hash, p);
		} else {
			storage.get(hash).add(path);
		}
	}

	public void printDuplicates() {
		for (Entry<Key, List<Path>> paths : storage.entrySet()) {
			System.out.println(paths.getValue());
		}
	}

	public void findDuplicate(Path path) throws IOException,
			NoSuchAlgorithmException {
		File file = path.toFile();
		File[] files = file.listFiles();
		for (File file2 : files) {
			Path filePath = file2.toPath();
			if (file2.isDirectory()) {
				findDuplicate(filePath);
			} else {
				byte[] bytes = Files.readAllBytes(filePath);
				storeFiles(storage, new Key(bytes), filePath);
			}
		}
	}
}
