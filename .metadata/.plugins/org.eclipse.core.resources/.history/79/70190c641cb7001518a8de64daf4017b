package week5.friday.bank;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.Serializable;
import java.util.Scanner;

import week5.friday.bank.Interest.InterestType;
import week5.friday.bank.account.BankAccount;
import week5.friday.bank.account.BankAccount.History;
import week5.friday.bank.account.Person;
import week5.friday.bank.database.Storage;
import week5.friday.bank.exception.ExceededInterestException;
import week5.friday.bank.exception.InsufficientAvailabilityException;
import week5.friday.bank.interfaces.BankOperations;

public class Bank implements BankOperations, Serializable {
	public enum OperationType {
		ADD, WITHDRAW, TRANSFER, SHOW_HISTORY, LOGOUT
	}

	private static final long serialVersionUID = 1L;
	private static ScannerClass sc;

	public Bank() throws FileNotFoundException {
		sc = new ScannerClass();
		loadAccounts();
		Storage.lastAccountID = loadLastAccountID();
	}

	private void loadAccounts() throws FileNotFoundException {
		if (new File("bankAccounts.ser").exists()) {
			Storage.loadFiles();
		}
	}

	private Long loadLastAccountID() {
		if (new File("lastAccountId.ser").exists()) {
			return Storage.getLastAccountID();
		}
		return 0L;
	}

	@Override
	public boolean createBankAccount() {
		Person person = new Person();
		System.out.println("Please enter your first name");
		person.setFirstName(sc.nextLine());

		System.out.println("Please enter your second name");
		person.setLastName(sc.nextLine());

		System.out.println("Please enter your age");
		person.setAge(Integer.parseInt(sc.nextLine()));

		BankAccount account = new BankAccount(person);
		account.setID(Storage.lastAccountID + 1);
		Storage.lastAccountID++;
		System.out.println("PLease enter your password");
		account.setPassword(sc.nextLine());
		System.out
				.println("Choose Interest type: for SIMPLE press 1\nFor COMPLEX press 2");
		InterestType type = null;
		switch (sc.getInt()) {
		case 1:
			type = InterestType.SIMPLE;
			break;
		default:
			type = InterestType.COMPLEX;
			break;
		}
		System.out.println("Choose size of the Interest");
		Interest interest = new Interest(account, type, sc.getDouble());
		account.setInterest(interest);
		Storage.accounts.put(account.getID(), account);
		Storage.saveAccounts();
		Storage.saveLastAccountId();
		return Storage.accounts.get(account.getID()) != null;
	}

	@Override
	public boolean add(BankAccount account, double money) {
		double total = account.getMoney() + money;
		account.setMoney(account.getMoney() + money);
		History history = account.new History(OperationType.ADD, money);
		account.getAccountHistory().add(history);
		return account.getMoney() == total;
	}

	@Override
	public double withdraw(BankAccount account, double money)
			throws ExceededInterestException, InsufficientAvailabilityException {
		if (account.getInterest().getInterestValue() > 1) {
			throw new ExceededInterestException(
					"Interest is bigger than 1 percent");
		}
		if (account.getMoney() < money) {
			throw new InsufficientAvailabilityException();
		}
		History history = account.new History(OperationType.WITHDRAW, money);
		account.getAccountHistory().add(history);
		return money;
	}

	@Override
	public boolean transfer(BankAccount account1, double money)
			throws ExceededInterestException, InsufficientAvailabilityException {
		System.out.println("Please give account ID to make transfer");
		Long id = sc.getLong();
		BankAccount account2 = null;
		try {
			account2 = Storage.accounts.get(id);
		} catch (Exception e) {
			System.err.println("Wrong Id...Please try to give correct id");
			transfer(account1, money);
		}
		double withdrawMoney = withdraw(account1, money);
		History history = account1.new History(OperationType.TRANSFER, money);
		account1.getAccountHistory().add(history);
		return add(account2, withdrawMoney);
	}

	@Override
	public BankAccount login() {
		return new Login().login();
	}
}
