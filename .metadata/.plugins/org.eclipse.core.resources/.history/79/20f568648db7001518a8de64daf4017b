package week5.friday.bank;

import java.io.FileNotFoundException;

import javax.naming.InvalidNameException;

import week5.friday.bank.account.AccountAccessManager;
import week5.friday.bank.account.AccountSession;
import week5.friday.bank.account.BankAccount;
import week5.friday.bank.database.Storage;
import week5.friday.bank.enums.AccountAccessCommands;
import week5.friday.bank.enums.OperationType;
import week5.friday.bank.exception.AgeException;
import week5.friday.bank.exception.ExceededInterestException;
import week5.friday.bank.exception.InsufficientAvailabilityException;

public class OnlineBanking {
	private static ScannerClass sc = new ScannerClass();

	public static void main(String[] args) throws NumberFormatException,
			ExceededInterestException, InsufficientAvailabilityException,
			FileNotFoundException {

		System.out.println("To create Bank account press 1\nTo login press 2");
		int commandNumber = sc.getInt();

		AccountAccessManager accessManager = new AccountAccessManager();
		AccountAccessCommands command = AccountAccessCommands.values()[commandNumber - 1];
		BankAccount account = null;
		AccountSession bank = new AccountSession();

		try {
			switch (command) {
			case CREATE_ACCOUNT:
				accessManager.createAccount();
			case LOGIN:
				account = accessManager.login();
				bank = new AccountSession(account);
				break;
			default:
				break;
			}

		} catch (AgeException ageException) {
			ageException.printStackTrace();
		} catch (InvalidNameException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		System.out.println("Hello " + account.getPerson().getFirstName() + " "
				+ account.getPerson().getLastName());
		boolean quit = true;

		while (quit) {
			System.out
					.println("Press 1 to add Money\nPress 2 to withdrawn Money"
							+ "\nPress 3 to transfer\nPress 4 to view history"
							+ "\nPress 5 to check balance\nPress 6 to logout");
			int number = sc.getInt();
			OperationType type = OperationType.values()[number - 1];
			switch (type) {
			case ADD:
				bank.add();
				break;
			case WITHDRAW:
				bank.withdraw();
				break;
			case TRANSFER:
				bank.transfer();
				break;
			case SHOW_HISTORY:
				account.showHistory();
				break;
			case CHECK_BALANCE:
				bank.showBalance();
				break;
			case LOGOUT:
				quit = false;
				break;
			default:
				break;
			}
		}
		Storage.saveAccounts();
	}
}
