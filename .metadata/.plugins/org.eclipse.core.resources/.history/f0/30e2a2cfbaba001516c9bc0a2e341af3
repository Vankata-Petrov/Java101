package monday.mp3organizer;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.file.CopyOption;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.PathMatcher;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.nio.file.attribute.PosixFileAttributes;

import org.farng.mp3.TagException;

public class Mp3Organizer {
	private static final int ID3_TAG_SIZE = 128;
	private static PathMatcher matcher = FileSystems.getDefault()
			.getPathMatcher("glob:*.{mp3}");

	@SuppressWarnings("unused")
	public void organizeSongs(Path path) throws IOException, TagException {
		for (File file : path.toFile().listFiles()) {
			PosixFileAttributes attribute = Files.readAttributes(file.toPath(),
					PosixFileAttributes.class);
			Path filePath = file.toPath();
			if (matcher.matches(filePath.getFileName())) {
				try {
					Mp3Metadata metaData = readID3Tag(file);
					createArtistFolder(metaData, file);
				} catch (Exception e) {
					throw new IllegalArgumentException(
							"ByteBuffer does not contain ID3 tag data");
				}
			}
		}
	}

	public void createArtistFolder(Mp3Metadata metaData, File file)
			throws IOException {
		metaData.checkForUnknownStatus();
		String artist = metaData.getArtist().toLowerCase();
		String parentDirectory = file.getParent();
		String albumName = metaData.getAlbum().toLowerCase();
		Path destination = Paths.get(parentDirectory + "/" + artist + "/"
				+ albumName);
		if (!Files.exists(Paths.get(parentDirectory + "/" + artist))) {
			createDir(destination, file, metaData);
		} else {
			if (destination.toFile().exists()) {
				copyFileToDir(destination, file,
						StandardCopyOption.REPLACE_EXISTING);
			} else {
				createDir(destination, file, metaData);
			}
		}
		if (new File(destination + "/" + file.getName()).exists()) {
			// remove duplicates
			file.delete();
		}
	}

	private void createDir(Path dest, File file, Mp3Metadata metaData,
			CopyOption... op) throws IOException {
		if (!dest.toFile().exists()) {
			Files.createDirectories(dest);
		}
		copyFileToDir(dest, file, op);
	}

	private void copyFileToDir(Path dest, File file, CopyOption... copyOptions)
			throws IOException {
		if (copyOptions != null) {
			Files.copy(file.toPath(), Paths.get(dest + "/" + file.getName()),
					copyOptions);
		} else {
			Files.copy(file.toPath(), Paths.get(dest + "/" + file.getName()));
		}
	}

	@SuppressWarnings("resource")
	public Mp3Metadata readID3Tag(File file) throws IOException {
		RandomAccessFile randomAccessFile = new RandomAccessFile(file, "r");
		byte[] tagData = new byte[ID3_TAG_SIZE];
		randomAccessFile.seek(randomAccessFile.length() - ID3_TAG_SIZE);
		randomAccessFile.read(tagData);
		ByteBuffer lst128Bytes = ByteBuffer.allocate(ID3_TAG_SIZE);
		lst128Bytes.put(tagData);
		lst128Bytes.rewind();
		return extractMetaData(lst128Bytes);
	}

	private Mp3Metadata extractMetaData(ByteBuffer bBuf)
			throws IllegalArgumentException {
		byte[] tag = new byte[3];
		byte[] title = new byte[30];
		byte[] artist = new byte[30];
		byte[] album = new byte[30];
		bBuf.get(tag).get(title).get(artist).get(album);
		return new Mp3Metadata(new String(title).trim(),
				new String(artist).trim(), new String(album).trim());
	}

	public static void main(String[] args) throws IOException, TagException {
		new Mp3Organizer().organizeSongs(Paths
				.get("/home/boyko/Downloads/music/"));
	}
}
