package friday.geometryfigure.point;

import friday.geometryfigure.GeometryFigures;

public final class LineSegment extends GeometryFigures implements
		Comparable<LineSegment> {
	private Point p1;
	private Point p2;

	public LineSegment(Point p1, Point p2) {
		if (p1.equals(p2)) {
			System.out.println("Cannot create a line segment with zero ");
		} else {
			this.p1 = p1;
			this.p2 = p2;
		}
	}

	public LineSegment(LineSegment line) {
		this(line.p1, line.p2);
	}

	public int getLength() {
		return (int) Math.sqrt((p1.getX() - p2.getX())
				* (p1.getX() - p2.getX()) + (p1.getY() - p2.getY())
				* (p1.getY() - p2.getY()));
	}

	@Override
	public String toString() {
		return "LineSegment [" + p1 + "," + p2 + "]";
	}

	public static void main(String[] args) {
		LineSegment l = new LineSegment(new Point(2, 2), new Point(5, 6));
		LineSegment l1 = new LineSegment(new Point(2, 2), new Point(5, 6));
		System.out.println(l.compareTo(l1));
	}

	@Override
	public int hashCode() {
		int hash = 17;
		hash = hash * 23 + p1.hashCode();
		hash = hash * 23 + p2.hashCode();
		return hash;
	}

	@Override
	public boolean equals(Object obj) {
		LineSegment other = (LineSegment) obj;
//		if (this.getLength() == other.getLength())
//			return true;
//		if (obj == null)
//			return false;
//		if (getClass() != obj.getClass())
//			return false;
//		if (p1 == null) {
//			if (other.p1 != null)
//				return false;
//		} else if (!p1.equals(other.p1))
//			return false;
//		if (p2 == null) {
//			if (other.p2 != null)
//				return false;
//		} else if (!p2.equals(other.p2))
//			return false;
		return getLength() == other.getLength();
	}

	@Override
	public int compareTo(LineSegment o) {
		return this.compareTo(o);
	}
}
