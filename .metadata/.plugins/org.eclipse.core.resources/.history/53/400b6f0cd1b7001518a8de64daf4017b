package week5.wednesday.binarytree;

public class BinaryTree {
	class Node {
		protected int depth;
		protected int height;
		protected int data;
		protected Node left;
		protected Node right;
		protected Node parent;

		public Node(int height, int depth, int data, Node parent) {
			this.height = height;
			this.depth = depth;
			this.data = data;
			this.left = null;
			this.right = null;
			this.parent = parent;
		}

		public Node(int data) {
			this.data = data;
			height = 0;
			depth = 0;

		}
	}

	private Node root;

	public BinaryTree() {
		// TODO Auto-generated constructor stub
	}

	public void add(int data) throws Exception {
		if (root == null) {
			root = new Node(data);
		} else {
			add(root, data);
		}
	}

	private void recalculateHeight(Node node) {
		if (node == root || (hasLeftNode(node) && node.left.height < node.right.height)) {
			return;
		}
		if (node == root || (!hasLeftNode(node))) {
			return;
		}
		node.height++;
		recalculateHeight(node.parent);
	}

	public void add(Node node, int data) throws Exception {
		if (node == null) {
			return;
		}
		if (data == node.data) {
			throw new Exception("BST not awoled duplicates");
		}
		if (data > node.data && !hasRightNode(node)) {
			node.right = new Node(0, node.depth + 1, data, node);
			if (!hasLeftNode(node)) {
				node.height++;
			}
			recalculateHeight(node);
			return;

		}
		if (data < node.data && !hasLeftNode(node)) {
			node.left = new Node(0, node.depth + 1, data, node);
//			if (!hasRightNode(node)) {
//				recalculateHeight(node);
//			}
			return;
		}

		Node nextNode = node.data < data ? node.right : node.left;
		add(nextNode, data);
	}

	public int getElementHeight(int element) {
		return getNodeByData(element).height;
	}

	public int getElementDepth(int number) {
		return getNodeByData(number, root).depth;
	}

	private Node getNodeByData(int number) {
		return getNodeByData(number, root);
	}

	public boolean contains(int element) {
		return getNodeByData(element) != null;
	}

	private Node getNodeByData(int data, Node node) {
		if (node == null) {
			return null;
		}
		if (data == node.data) {
			return node;
		}
		if (data < node.data) {
			return getNodeByData(data, node.left);
		} else if (data > node.data) {
			return getNodeByData(data, node.right);
		}
		return node;
	}

	public int getParentData(int data) {
		return getNodeByData(data).parent.data;
	}

	public int getRootData() {
		return root.data;
	}

	public void delete(int data) {
		delete(root, data);
	}

	private Node findSmallest(Node node, int data) {
		if (node.left == null) {
			return node;
		}
		return findSmallest(node.left, data);
	}

	private boolean isLeaf(Node node) {
		return node.right == null & node.left == null;
	}

	private void deleteLeaf(Node leaf) {
		if (leaf == leaf.parent.right) {
			leaf.parent.right = null;
		} else {
			leaf.parent.left = null;
		}
	}

	private boolean hasRightNode(Node node) {
		return node.right != null;
	}

	private boolean hasLeftNode(Node node) {
		return node.left != null;
	}

	private void delete(Node node, int data) {
		if (node == null) {
			return;
		}
		if (node.data > data) {
			delete(node.left, data);
		} else if (node.data < data) {
			delete(node.right, data);
		} else {
			if (isLeaf(node)) {
				deleteLeaf(node);
			} else {
				if (hasRightNode(node)) {
					Node smallest = findSmallest(node.right, node.data);
					node.data = smallest.data;
					System.out.println(smallest.data);
					delete(smallest, smallest.data);
				} else {
					node.parent.left = node.left;
				}
			}
		}
	}

	@Override
	public String toString() {
		return new PrintTree(root).toString();
	}

	public String recursivePrintNodeData() {
		return new PrintTree(root).recursivePrintNodeData();
	}
}