package friday.geometryfigure.polygon;

import friday.geometryfigure.GeometryFigure;
import friday.geometryfigure.point.Point;

public final class Rectangle extends Polygon {

	public Rectangle(Point leftTop, Point baseRight) {
		super(new Point(baseRight.getX(), leftTop.getY()), baseRight, leftTop,
				new Point(baseRight.getX(), leftTop.getY()));
		Point baseLeft = new Point(baseRight.getX(), leftTop.getY());
		Point topRight = new Point(baseRight.getX(), leftTop.getY());
		if (leftTop.getX() == baseRight.getX()) {
			throw new IllegalArgumentException("Points are on the same axis.");
		}
		// this.upperLeft = p1;
		// this.lowerRight = p2;
		// upperRight = new Point(lowerRight.getX(), upperLeft.getY());
		// lowerLeft = new Point(lowerRight.getX(), upperLeft.getY());
		// upperVertice = new LineSegment(upperLeft, upperRight);
		// base = new LineSegment(lowerLeft, lowerRight);
		// leftVertice = new LineSegment(lowerLeft, upperLeft);
		// rightVertice = new LineSegment(lowerRight, upperRight);
	}

	public Rectangle(Rectangle rect) {
		this(rect.getBaseLeftTop(), rect.getBaseRight());
	}

	public Point getUpperLeft() {
		return getBaseLeftTop();
	}

	public Point getUpperRight() {
		return getBaseRightTop();
	}

	public Point getLowerLeft() {
		return lowerLeft;
	}

	public Point getLowerRight() {
		return lowerRight;
	}

	public LineSegment upperVertice() {
		return upperVertice;
	}

	public LineSegment lowerVertice() {
		return base;
	}

	public LineSegment leftVertice() {
		return leftVertice;
	}

	public LineSegment rightVertice() {
		return rightVertice;
	}

	@Override
	public float getPerimeter() {
		return (2 * upperVertice().getLength())
				+ (2 * leftVertice().getLength());
	}

	@Override
	public float getArea() {
		return upperVertice().getLength() * rightVertice().getLength();
	}

	@Override
	public Point getCenter() {
		return new Point((this.lowerLeft.getX() + this.getBaseLeftTop().getX()) / 2,
				(this.lowerLeft.getY() + lowerRight.getY()) / 2);
	}

	@Override
	public String toString() {
		return String.format("Rectangle[(%.1f,%.1f),(%.1f,%.1f)]",
				getBaseLeftTop().getX(), getBaseRightTop().getY(),
				upperVertice().getLength(), rightVertice().getLength());
	}

	public static void main(String[] args) {
		Rectangle rect = new Rectangle(new Point(1, 5), new Point(10, 3));
		System.out.println(rect);
		System.out.println(rect.getCenter());
	}

	public int hashCode() {
		int hash = 17;
		hash = hash * 23 + lowerRight.hashCode();
		hash = hash * 23 + getBaseLeftTop().hashCode();
		return hash;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Rectangle other = (Rectangle) obj;
		if (lowerRight == null) {
			if (other.lowerRight != null)
				return false;
		} else if (!lowerRight.equals(other.lowerRight))
			return false;
		if (getBaseLeftTop() == null) {
			if (other.getBaseLeftTop() != null)
				return false;
		} else if (!getBaseLeftTop().equals(other.getBaseLeftTop()))
			return false;
		return true;
	}
}
