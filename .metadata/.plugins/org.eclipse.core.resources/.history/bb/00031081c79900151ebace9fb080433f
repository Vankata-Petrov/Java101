package wednesday.cryptoanalysis.util;

import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;

public class Histogram {

	public static Map<Character, Integer> createHistogram(String cryptedText) {
		Map<Character, Integer> histogram = new HashMap<>();
		int textLength = cryptedText.length();
		for (int i = 0; i < textLength; i++) {
			char letter = cryptedText.charAt(i);
			if (!histogram.containsKey(letter)) {
				histogram.put(letter, 1);
			} else {
				histogram.put(letter, histogram.get(letter) + 1);
			}
		}
		return sortByValue(histogram);
		// return histogram;
	}

	public static <K, V extends Comparable<V>> Map<Character, Integer> sortByValues(
			final Map<K, V> map) {
		Comparator<Character> valueComparator = new Comparator<Character>() {
		

			@Override
			public int compare(java.lang.Character o1, java.lang.Character o2) {
				// TODO Auto-generated method stub
				int compare = map.get(o1).compareTo(map.get(o2));
				if (compare == 0)
					return 1;
				else
					return compare;
			}
		};
		Map<Character,Integer> sortedByValues = new TreeMap<>(valueComparator);
		sortedByValues.putAll(map);
		return sortedByValues;
	}

	private static <Character, Integer extends Comparable<Integer>> Map<Character, Integer> sortByValue(
			Map<Character, Integer> map) {
		List<Map.Entry<Character, Integer>> list = new LinkedList<>(
				map.entrySet());
		Collections.sort(list, new Comparator<Map.Entry<Character, Integer>>() {

			@Override
			public int compare(Entry<Character, Integer> o1,
					Entry<Character, Integer> o2) {
				return o1.getValue().compareTo(o2.getValue());
			}

		});

		Map<Character, Integer> result = new TreeMap<>();
		for (Entry<Character, Integer> entry : list) {
			result.put(entry.getKey(), entry.getValue());
		}
		return result;
	}
}
