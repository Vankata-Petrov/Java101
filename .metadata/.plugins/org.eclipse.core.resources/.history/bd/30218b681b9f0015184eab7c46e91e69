package friday.hashmap;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class MyHashMap<K, V> implements Map<K, V> {
	static class MapEntry<K, V> {
		K key;
		V value;

		public MapEntry(K key, V value) {
			this.key = key;
			this.value = value;
		}

	}

	private List<List<MapEntry<K, V>>> buckets;
	private int initialCapacity;
	private static final float LOAD_FACTOR = 0.75f;

	public MyHashMap() {
		initialCapacity = 16;
		buckets = new ArrayList<>(initialCapacity);
		loadBuckets();
	}

	public MyHashMap(int initialCapacity) {
		this.initialCapacity = initialCapacity;
		buckets = new ArrayList<>(initialCapacity);
		loadBuckets();
	}

	private void loadBuckets() {
		for (int i = 0; i < initialCapacity; i++) {
			buckets.add(new LinkedList<MapEntry<K, V>>());
		}
	}
	
	static int hash(int h) {
	    // This function ensures that hashCodes that differ only by
	    // constant multiples at each bit position have a bounded
	    // number of collisions (approximately 8 at default load factor).
	    h ^= (h >>> 20) ^ (h >>> 12);
	    return h ^ (h >>> 7) ^ (h >>> 4);
	}
	/**
	 * Returns index for hash code h.
	 */
	static int indexFor(int h, int length) {
	    return h & (length-1);
	}

	private int hash(Object key) {
		return Math.abs(key.hashCode() % initialCapacity);
	}

	@Override
	public int size() {
		return buckets.size();
	}

	@Override
	public boolean isEmpty() {
		return buckets.isEmpty();
	}

	@Override
	public boolean containsKey(Object key) {
		if (key == null) {
			return false;
		}
		int hash = hash(key.hashCode());
		int position = indexFor(hash, size());
		List<MapEntry<K, V>> entries = buckets.get(position);
		for (MapEntry<K, V> mapEntry : entries) {
			if (mapEntry.key.equals(key)) {
				return true;
			}
		}
		return false;
	}

	@Override
	public boolean containsValue(Object value) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public V get(Object key) {
		int position = hash(key);
		if (key == null || buckets.get(position) == null) {
			throw new NullPointerException();
		}
		List<MapEntry<K, V>> listEntry = buckets.get(position);
		for (MapEntry<K, V> mapEntry : listEntry) {
			if (mapEntry.key.equals(key)) {
				return mapEntry.value;
			}
		}
		return null;
	}

	@Override
	public V put(K key, V value) {
		int position = hash(key);
		if (key == null || buckets.get(position) == null) {
			throw new NullPointerException();
		}
		List<MapEntry<K, V>> listEntry = buckets.get(position);
		if (listEntry == null) {
			List<MapEntry<K, V>> entryList = new LinkedList<>();
			entryList.add(new MapEntry<>(key, value));
			buckets.add(position, entryList);
		} else {
			listEntry.add(new MapEntry<>(key, value));
		}
		return value;
	}

	@Override
	public V remove(Object key) {
		int position = hash(key);
		if (key == null) {
			throw new NullPointerException();
		}
		List<MapEntry<K, V>> mapEntry = buckets.get(position);
		Iterator<MapEntry<K, V>> it = mapEntry.listIterator();
		while (it.hasNext()) {
			MapEntry<K, V> k = it.next();
			if (k.key.equals(key)) {

				it.remove();
			}
		}
		return null;
	}

	@Override
	public void putAll(Map<? extends K, ? extends V> m) {
		// TODO Auto-generated method stub

	}

	@Override
	public void clear() {
		buckets.clear();

	}

	@Override
	public Set<K> keySet() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Collection<V> values() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Set<java.util.Map.Entry<K, V>> entrySet() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String toString() {
		String displayMap = "";
		for (int i = 0; i < size(); i++) {
			if (this.buckets.get(i) != null) {
				List<MapEntry<K, V>> entry = this.buckets.get(i);
				for (MapEntry<K, V> mapEntry : entry) {
					displayMap += "key: " + mapEntry.key + " value: "
							+ mapEntry.value + "\n";
				}
			}
		}
		return displayMap;
	}
}
