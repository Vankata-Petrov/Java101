package monday.filedatacompression;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.TreeMap;

public class FileDataCompression {
	public static final File COMPRESSED_DATA = new File("compressedFile.properties");

	public static void compress(Path path) throws IOException {
		Properties prop = new Properties();
		int wordId = 0;
		Map<String, Integer> mappedWords = new TreeMap<>();
		List<String> content = Files.readAllLines(path);
		List<String> compressedData = new ArrayList<>();
		for (String words : content) {
			words = words.replaceAll(" ", "~");
			String[] splited = words.trim().split("~");
			for (String word : splited) {
				word = word.replaceAll("\\p{Punct}", "");
				if (!prop.containsKey(word)) {
				//	mappedWords.put(word, wordId++);
					prop.setProperty(wordId++ + "", word);
				}
				words = words.replaceAll(word, prop.get(word) + "");
			}
			compressedData.add(words + System.lineSeparator());
		}
		prop.store(new FileWriter(COMPRESSED_DATA), "props");
		mappedWords.put(compressedData.toString(), 0);
		// saveMap(mappedWords);
		System.out.println(compressedData);
	}

	private static void saveMap(Map<String, Integer> map) throws IOException {
		try (BufferedWriter writer = new BufferedWriter(new FileWriter(COMPRESSED_DATA))) {
			for (Map.Entry<String, Integer> entry : map.entrySet()) {
				String line = entry.getKey() + "=" + entry.getValue() + System.lineSeparator();
				writer.write(line);
			}
		}
	}

	public static void decompress(Path path) throws ClassNotFoundException, IOException {
		Properties p = new Properties();
		p.load(new FileInputStream(COMPRESSED_DATA));
		Enumeration e = p.propertyNames();

		for (; e.hasMoreElements();) {
			System.out.println(e.nextElement());

		}
		//System.out.println(loadMaps(path));
	}
}
