package monday.mp3organizer;

import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.PathMatcher;
import java.nio.file.Paths;
import java.nio.file.attribute.PosixFileAttributes;

import org.farng.mp3.MP3File;
import org.farng.mp3.TagException;

public class Mp3Organizer {
	private static PathMatcher matcher = FileSystems.getDefault()
			.getPathMatcher("glob:*.{mp3}");

	public void organizeSongs(Path path) throws IOException, TagException {
		for (File file : path.toFile().listFiles()) {
			PosixFileAttributes attribute = Files.readAttributes(file.toPath(),
					PosixFileAttributes.class);
			// Parser p = new Mp3Parser();
			MP3File f = new MP3File(file);
			System.out.println();
			if (matcher.matches(file.toPath().getFileName())) {

				System.out.println(file);
			}
		}
	}

	private Mp3Metadata populateTag(ByteBuffer bBuf) {
		byte[] tag = new byte[3];
		byte[] title = new byte[30];
		byte[] artist = new byte[30];
		byte[] album = new byte[30];
		bBuf.get(tag).get(title).get(artist).get(album);
		if (!"TAG".equals(new String(tag))) {
			throw new IllegalArgumentException(
					"ByteBuffer does not contain ID3 tag data");
		}
		Tag tagOut = new Tag();
		tagOut.setTitle(new String(tagTitle).trim());
		tagOut.setArtist(new String(tagArtist).trim());
		tagOut.setAlbum(new String(tagAlbum).trim());
		tagOut.setYear(new String(tagYear).trim());
		tagOut.setComment(new String(tagComment).trim());
		tagOut.setGenre(tagGenre[0]);
		return tagOut;
	}

	public static void main(String[] args) throws IOException, TagException {
		new Mp3Organizer()
				.organizeSongs(Paths.get("/home/boyko/Desktop/music"));
	}
}
