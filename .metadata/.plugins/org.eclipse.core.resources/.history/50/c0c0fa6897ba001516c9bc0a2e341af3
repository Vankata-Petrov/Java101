package monday.mp3organizer;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.PathMatcher;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.nio.file.attribute.PosixFileAttributes;

import org.apache.tika.exception.TikaException;
import org.farng.mp3.TagException;
import org.xml.sax.SAXException;

public class Mp3Organizer {
	private static final int ID3_TAG_SIZE = 128;
	private static PathMatcher matcher = FileSystems.getDefault()
			.getPathMatcher("glob:*.{mp3}");

	@SuppressWarnings("unused")
	public void organizeSongs(Path path) throws IOException, TagException, SAXException, TikaException {
//		InputStream input = new FileInputStream(new File(path.toString()));
//		ContentHandler handler = new DefaultHandler();
//		Metadata metadata = new Metadata();
//		Parser parser = new Mp3Parser();
//		ParseContext parseCtx = new ParseContext();
//		parser.parse(input, handler, metadata, parseCtx);
//		input.close();
//		 
//		// List all metadata
//		String[] metadataNames = metadata.names();
//		 
//		for(String name : metadataNames){
//		System.out.println(name + ": " + metadata.get(name));
//		}
		 
		for (File file : path.toFile().listFiles()) {
			PosixFileAttributes attribute = Files.readAttributes(file.toPath(),
					PosixFileAttributes.class);
			Path filePath = file.toPath();
			if (matcher.matches(filePath.getFileName())) {
				try {
					Mp3Metadata metaData = readTag(file);
					createArtistFolder(metaData, file);
				} catch (Exception e) {
					throw new IllegalArgumentException(
							"ByteBuffer does not contain ID3 tag data");
				}
			}
		}
	}

	public void createArtistFolder(Mp3Metadata metaData, File file)
			throws IOException {
		if (metaData.hasArtistName()) {
			metaData.setArtist(Mp3Metadata.UNKNOWN_ARTIST);
		} else if (metaData.hasAlbumName()) {
			metaData.setAlbum(Mp3Metadata.UNKNOWN_ALBUM);
		} else if (metaData.hasSongName()) {
			metaData.setTitle(Mp3Metadata.UNKNOWN_SONG);
		}
		String artist = metaData.getArtist();
		String parentDirectory = file.getParent();
		String albumName = metaData.getAlbum();
		if (!Files.exists(Paths.get(parentDirectory + "/" + artist))) {
			Files.createDirectories(Paths.get(parentDirectory + "/" + artist
					+ "/" + albumName));
			Files.copy(
					file.toPath(),
					Paths.get(parentDirectory + "/" + artist + "/" + albumName
							+ "/" + file.getName()));
		} else {
			Files.copy(
					file.toPath(),
					Paths.get(parentDirectory + "/" + artist + "/" + albumName
							+ "/" + file.getName()),
					StandardCopyOption.REPLACE_EXISTING);
		}
		System.out
				.println(albumName + " " + artist + " " + metaData.getTitle());
		file.delete();
	}

	@SuppressWarnings("resource")
	public Mp3Metadata readTag(File file) throws IOException {
		RandomAccessFile randomAccessFile = new RandomAccessFile(file, "r");
		byte[] tagData = new byte[ID3_TAG_SIZE];
		randomAccessFile.seek(randomAccessFile.length() - ID3_TAG_SIZE);
		randomAccessFile.read(tagData);
		ByteBuffer lst128Bytes = ByteBuffer.allocate(ID3_TAG_SIZE);
		lst128Bytes.put(tagData);
		lst128Bytes.rewind();
		return extractMetaData(lst128Bytes);
	}

	private Mp3Metadata extractMetaData(ByteBuffer bBuf)
			throws IllegalArgumentException {
		byte[] tag = new byte[3];
		byte[] title = new byte[30];
		byte[] artist = new byte[30];
		byte[] album = new byte[30];
		bBuf.get(tag).get(title).get(artist).get(album);
		return new Mp3Metadata(new String(title).trim(),
				new String(artist).trim(), new String(album).trim());
	}

	public static void main(String[] args) throws IOException, TagException, SAXException, TikaException {
		new Mp3Organizer()
				.organizeSongs(Paths.get("/home/boyko/Desktop/music/Beyonce_-_Move_Your_Body_Let_s_Move_Campaign_(mp3.pm).mp3"));
	}
}
