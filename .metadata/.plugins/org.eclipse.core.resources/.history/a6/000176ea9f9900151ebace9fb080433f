package wednesday.rotatecollection;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Stack;

public class Rotator {
	public static <T> void rotateLeft(Collection<T> collection, int rotateStep) {
		List<T> l = new ArrayList<>();
		for (T t : collection) {
			l.add(t);
		}
		int size = l.size();
		for (int i = 0; i < Math.abs(rotateStep); i++) {
			l.add(size, l.get(i));
			l.remove(i);
		}
		collection.clear();
		for (T t : l) {
			collection.add(t);
		}
	}

	public static <T> void rotateRigth(Collection<T> collection, int rotateStep) {
		List<T> l = new ArrayList<>();
		for (T t : collection) {
			l.add(t);
		}
		for (int i = 0; i < rotateStep; i++) {
			l.add(0, l.get(l.size()-1));
			l.remove(l.size()-1);
		}
		collection.clear();
		for (T t : l) {
			collection.add(t);
		}
	}

	public static <T> void rotate(Collection<T> collection, int rotateStep) {
		if (rotateStep < 0) {
			rotateLeft(collection, rotateStep);
		} else {
			rotateRigth(collection, rotateStep);
		}
	}

	public static void main(String[] args) {
		List<Integer> l = new ArrayList<>();
		Stack<Integer> l2 = new Stack<>();
		for (int i = 10; i < 20; i++) {
			l.add(i);
			l2.add(i);
		}
		rotate(l, 3);
		System.out.println(l);
	}

}
