package com.boyko.polinom;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

public class PolinomSolver {
	static List<int[]> lists = new ArrayList<>();

	public static void main(String[] args) {
		// System.out.println(new PolinomParser("x5+2x^4+3x^3+x+1+x6").parse());
		// int[] a = { -2, 1, 4, 5, 7, 8, 10, 100, 200, 400, 4000 };
		// binarySearch(-2, a);
		List<Object> list1 = new ArrayList<>();
		List<Object> list2 = new ArrayList<>();
		List<Integer> list3 = Arrays.asList(4, 5, 6);
		list2.add(2);
		list2.add(3);
		list2.add(list3);
		list2.add(7);
		list1.add(1);
		list1.add(list2);
		list1.add(8);
		list1.add(9);
		// System.out.println(list1);
		permute(Arrays.asList(1, 2, 3, 4));
		int[][] matrix = new int[10][10];
		for (int i = 0; i < matrix.length; i++) {
			for (int j = 0; j < matrix.length; j++) {
				matrix[i][j] = (i + j) * 10;
				System.out.print((i + j) * 10 + " ");
			}
			System.out.println();
		}
		System.out.println();
		matrixWalk(matrix);
		int[][][] cube = new int[3][3][5];
		for (int i = 0; i < cube.length; i++) {
			for (int j = 0; j < cube.length; j++) {
				// cube[i][j] = j;
				for (int j2 = 0; j2 < cube.length; j2++) {
					cube[i][j][j2] = (j2+j)*(i+1);
				}
			}
		}
		for (int[][] is : cube) {
			for (int[] is2 : is) {
				for (int i : is2) {
					System.out.print(i + " ");
				}
				System.out.println();
			}
			System.out.println("===================");
		}
		// System.out.println(Arrays.toString(cube));
	}

	private static void binarySearch(int i, int[] a) {
		int l = 0;
		int r = a.length - 1;
		while (l <= r) {
			int m = (l + r) / 2;

			if (a[m] == i) {
				System.out.println("found");
				return;
			}
			if (a[m] > i) {
				r = m - 1;
			}
			if (a[m] < i) {
				l = m + 1;
			}

		}
		System.out.println("not found");
	}

	@SuppressWarnings("unchecked")
	public static void printList(List<Object> l) {
		Iterator<Object> it = l.iterator();
		System.out.println();
		while (it.hasNext()) {
			Object object = (Object) it.next();
			if (object instanceof List) {
				printList((List<Object>) object);
				System.out.println();
			} else {
				System.out.print(object + " ");
			}
		}
	}

	public static void permute(List<Integer> l) {
		for (int k = 0; k < l.size(); k++) {
			Collections.swap(l, 0, k);
			for (int j = 0; j < l.size() - 1; j++) {
				for (int i = 1; i < l.size() - 1; i++) {
					System.out.println(l);
					Collections.swap(l, i, i + 1);
				}
			}
		}
	}

	public static void matrixWalk(int[][] matrix) {
		for (int i = matrix.length - 1; i > 0; i--) {
			if (i % 2 == 0) {
				for (int j = matrix.length - 1; j > 0; j--) {
					System.out.print(matrix[i][j] + " ");
				}
			} else {
				for (int j = 0; j < matrix.length; j++) {
					System.out.print(matrix[i][j] + " ");
				}
			}
			System.out.println();
		}
	}
}
