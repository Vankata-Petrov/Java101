package monday.filedatacompression;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FileDataCompression {
	private static final File COMPRESSED_DATA = new File("compressedFile.properties");

	public static void compress(Path path) throws IOException {
		int wordId = 0;
		Map<String, Integer> mappedWords = new HashMap<>();
		List<String> content = Files.readAllLines(path);
		List<String> compressedData = new ArrayList<>();
		for (String words : content) {
			words = words.replaceAll(" ", "~");
			String[] splited = words.trim().split("~");
			for (String word : splited) {
				word = word.replaceAll("\\p{Punct}", "");
				if (!mappedWords.containsKey(word)) {
					mappedWords.put(word, wordId++);
				}
				words = words.replaceAll(word, mappedWords.get(word) + "");
			}
			compressedData.add(words);
			saveMaps(mappedWords);
		}
	}

	private static void saveMaps(Map<String, Integer> map) throws IOException {
		try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(COMPRESSED_DATA))) {
			oos.writeObject(map);
			oos.close();
		}
	}

	public static void loadMaps(Map<String, Integer> map) {
		try {
			ObjectInputStream ois = new ObjectInputStream(new FileInputStream(COMPRESSED_DATA));
			Object readMap = ois.readObject();
			if (readMap != null && readMap instanceof HashMap) {
				map.putAll((HashMap) readMap);
			}
			ois.close();
		} catch (Exception e) {
			// Catch exceptions
		}
	}

	public static void decompress(Path path) {

	}
}
